{1,
{18,
{"!+кпс+",1,0,"",""},
{16,
{"Разработка",1,0,"",""},
{7,
{"ПроцедурыФункции",1,0,"",""},
{0,
{"ПроцЭксопрт",0,1,"Проэ[едура]","
Процедура аян_<?""Имя процедуры"">()	Экспорт
	Попытка
		<?""Имя процедуры"">(Источник);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки; 	
КонецПроцедуры

Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры"}
},
{0,
{"ПроцНаСервере",0,1,"Прос[едура]","&НаСервере
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
},
{0,
{"ПроцНаСервереБезКонт",0,1,"Просб[едура]","&НаСервереБезКонтекста
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
},
{0,
{"ПроцНаКлиенте",0,0,"Прок[едура]","&НаКлиенте
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
},
{0,
{"ФункцияНаСервереБезКонт",0,0,"Фусб[ция]","&НаСервереБезКонтекста
Функция <?""Имя функции"">()
	<?>
КонецФункции"}
},
{0,
{"ФункцияНаКлиенте",0,1,"Фук[ция]","&НаКлиенте
Функция <?""Имя функции"">()
	<?>
КонецФункции"}
},
{0,
{"ФункцияНаСервере",0,0,"Фус[ция]","&НаСервере
Функция <?""Имя функции"">()
	<?>
КонецФункции"}
}
},
{3,
{"Модули форм, объектов",1,0,"",""},
{0,
{"МодульФормы",0,1,"модф","&НаКлиенте
Перем ИмяПеременнной;

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

#КонецОбласти"}
},
{0,
{"МодульМенеджера",0,1,"модм","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&НаКлиенте
Перем ИмяПеременнной;

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

#КонецОбласти

#Область ПроцедурыФормированияДвижений

#КонецОбласти

#Область ОтложенноеПроведение

#КонецОбласти

#Область ПроцедурыИФункцииПечати

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли"}
},
{0,
{"МодульОбъектаДокумент",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

#КонецОбласти

#Область ВидыЗапасов

#КонецОбласти

#Область Прочее

#КонецОбласти

#КонецОбласти

#КонецЕсли
"}
}
},
{0,
{"TODO",0,0,"туду","//TODO: "}
},
{0,
{"гспп",0,0,"гспп","// ▼ <?""Полный текст задачи""> ▼ Начало
	<?>
// ▲ <?""Полный текст задачи""> ▲ Конец 
"}
},
{0,
{"кпсп",0,0,"кпсп","// ▼ #кпс <?""Полный текст задачи"">  КирилловПС  <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">  ▼ Начало
	<?>
// ▲ #кпс <?""Полный текст задачи"">  КирилловПС  <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">  ▲ Конец 
"}
},
{0,
{"кпсб",0,0,"кпсб","// ▼ ayan#bitrix#<?""Номер задачи""> <?""Полный текст задачи"">  КирилловПС  <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">  ▼ Начало
	<?>
// ▲ ayan#bitrix#<?""Номер задачи""> <?""Полный текст задачи"">  КирилловПС  <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">  ▲ Конец 



"}
},
{0,
{"ХранениеНастроекНаФорме",0,0,"","#Область  ХранениеНастроекФормы
 
&НаСервере
Функция ИмяВнешейОбрбаоткиОтчета()
	Обработка = РеквизитФормыВЗначение(""Объект"");
	ТипВнешнейОбработки = СтрРазделить(Строка(ТипЗнч(Обработка)),"":"")[0];
	ТипВнешнейОбработки = ТРег(ТипВнешнейОбработки);
	ТипВнешнейОбработки = СтрЗаменить(ТипВнешнейОбработки, ""Объект"" , """");
	ТипВнешнейОбработки = СтрЗаменить(ТипВнешнейОбработки, "" "" , """");
	ИмяОбработки = Обработка.Метаданные().Имя;	//Обработка.Объект.Свойство(
	
	Возврат   ТипВнешнейОбработки + ""_"" + ИмяОбработки;
КонецФункции 

//Вызывается при создании на сервере
&НаСервере
Процедура ВосстановитьНастройкиНаСервере()

	НастройкиОбработки = ХранилищеНастроекДанныхФорм.Загрузить(ИмяВнешейОбрбаоткиОтчета(), ""НастройкиЗаполнения"", , ПараметрыСеанса.ТекущийПользователь);
	
	Если НастройкиОбработки = Неопределено Тогда 
		Возврат; // Нет сохраненных настроек
	КонецЕсли;
	
	// Восстановление настроек из хранилища
	Объект.ПериодОбъекта	= НастройкиОбработки.Реквизит1;
	ПериодФормы	= НастройкиОбработки.Реквизит2;
	//Объект.Реквизит3	= НастройкиОбработки.Реквизит3;
	//Объект.ТабличнаяЧасть1.Загрузить(НастройкиОбработки.ТабличнаяЧасть1);
	
КонецПроцедуры

//Вызывается при закрытии формы
&НаСервере
Процедура СохранитьНастройкиНаСервере()

	// Подготовка структуры настроек для сохранения
	НастройкиОбработки = Новый Структура();
	НастройкиОбработки.Вставить(""Реквизит1"",		Объект.ПериодОбъекта);
	НастройкиОбработки.Вставить(""Реквизит2"",		ПериодФормы);
	//НастройкиОбработки.Вставить(""Реквизит3"",		Объект.Реквизит3);	
	//НастройкиОбработки.Вставить(""ТабличнаяЧасть1"", 	        Объект.ТабличнаяЧасть1.Выгрузить());
	
	// Сохранение настроек в хранилище
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяВнешейОбрбаоткиОтчета(), ""НастройкиЗаполнения"", НастройкиОбработки, , ПараметрыСеанса.ТекущийПользователь);
	
КонецПроцедуры

#КонецОбласти
"}
},
{8,
{"Работа с запросами",1,0,"",""},
{0,
{"змвт",0,0,"змвт","Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(  ).ПолучитьДанные().Выгрузить();"}
},
{0,
{"РезультатЗапросаВ_ТЗ",0,1,"РЗТ","РЗТ = Запрос.Выполнить().Выгрузить();"}
},
{0,
{"РезультатЗапросаОбыч",0,0,"РЗ","РЗ = Запрос.Выполнить();

Если РЗ.Пустой() Тогда
	Возврат;
КонецЕсли; 
//Для проверки
РЗТ = РЗ.Выгрузить();

ВДЗ = РЗ.Выбрать();

Пока ВДЗ.Следующий() Цикл
	
КонецЦикла;
"}
},
{0,
{"РезультатЗапроса",0,0,"рзг","РЗ = Запрос.Выполнить();

Если РЗ.Пустой() Тогда
	Возврат;
КонецЕсли;

ВЗ = РЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Пока ВЗ.Следующий() Цикл
	ВДЗ = ВЗ.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
	
	КонецЦикла;

КонецЦикла;
"}
},
{0,
{"Выборка",0,0,"Выб","Выборка = РЗ.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>		
КонецЦикла;"}
},
{0,
{"Запрос",0,0,"ЗапМ","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр(""<?>"", );

РЗ = Запрос.Выполнить();
ВЗ = РЗ.Выбрать();
ТЧЗ = РЗ.Выгрузить();

ВЗ.Следующий(); 
"}
},
{0,
{"МойЗапрос",0,0,"зап","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр(""<?>"", );

ТЗ = Запрос.Выполнить().Выгрузить();
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
		
КонецЦикла;
"}
},
{0,
{"ЕслиВДЗ.Следующий",0,0,"ЕслиВДЗ","ВДЗ = РезультатЗапроса.Выбрать();

Если ВДЗ.Следующий() Тогда
	<?>
КонецЕсли; 

"}
}
},
{13,
{"Ускорение ввода кода",1,0,"",""},
{0,
{"[]",0,0,"ъх","[<?>]"}
},
{0,
{"<>",0,0,"бю","<> <?>"}
},
{0,
{"ЗначениеЗаполненно",0,0,"ЗЗ","ЗначениеЗаполнено(<?>)"}
},
{0,
{"Объект.",0,0,"об","Объект.<?>"}
},
{0,
{"ПредопредЗначение",0,0,"пз","ПредопределенноеЗначение(""<?>"");"}
},
{0,
{"ЕслиИначеЕсли",0,0,"Если","Если <?""Условие""> Тогда
	<?>	
ИначеЕсли <?""Условие2""> Тогда
КонецЕсли;"}
},
{0,
{"Структура",0,0,"ст","= Новый Структура(""<?>"",);"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ззс","ЗаполнитьЗначенияСвойств(<?>,);"}
},
{0,
{"Область",0,0,"Обл","#Область  <?""ИмяОбласти"">

#КонецОбласти
"}
},
{0,
{"Массив",0,0,"мас","= Новый Массив;
<?>"}
},
{0,
{"ТекПол",0,0,"ТекПол","аян_НастройкиПовтИсп.ТекущийПользователь()"}
},
{0,
{"Попытка",0,0,"поп","Попытка
	
	<?>
		
Исключение
	ЗафиксироватьОшибкуExchange(<?""Метод"">"");
	//пр_Ошибка = ОписаниеОшибки();
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = пр_Ошибка;
	//Сообщение.Сообщить(); 
	//ОтправитьСообщениеВТелеграммПетрушка(""РезультатОтправкиУведомленияУниверсальное"", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
 	Возврат Неопределено;
КонецПопытки;
"}
},
{0,
{"УстановкаПрилигерРежима",0,0,"прил","УстановитьПривилегированныйРежим(Истина);

<?>

УстановитьПривилегированныйРежим(Ложь);
"}
}
},
{3,
{"Коллекции",1,0,"",""},
{0,
{"Структура из Выборки запроса",0,0,"","	МассивДанных = Новый Массив;
	Для Каждого СтрокаТаблицы Из Выборка Цикл
		СтруктураДанных = Новый Структура;
		Для Каждого Колонка Из Выборка.Колонки Цикл
			СтруктураДанных.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
		
	Возврат МассивДанных;
"}
},
{0,
{"Создание Таблицы значений",0,0,"тз","МассивДок = Новый Массив;
МассивДок.Добавить(Тип(""ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров""));
МассивДок.Добавить(Тип(""ДокументСсылка.ОрдерНаОтражениеНедостачТоваров""));
МассивДок.Добавить(Тип(""ДокументСсылка.ПриобретениеТоваровУслуг""));
МассивДок.Добавить(Тип(""ДокументСсылка.ПересортицаТоваров""));
МассивДок.Добавить(Тип(""ДокументСсылка.ПеремещениеТоваров""));
МассивДок.Добавить(Тип(""ДокументСсылка.ВозвратТоваровОтКлиента""));
МассивДок.Добавить(Тип(""ДокументСсылка.РеализацияТоваровУслуг""));

ТЗ = Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить(""РегистраторП"", ОбщегоНазначения.ОписаниеТипаСтрока(70));
ТЗ.Колонки.Добавить(""Регистратор"", Новый ОписаниеТипов(МассивДок));
ТЗ.Колонки.Добавить(""Номенклатура"", Новый ОписаниеТипов(""СправочникСсылка.Номенклатура""));
ТЗ.Колонки.Добавить(""Дата"", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
ТЗ.Колонки.Добавить(""СтрокаКод"", ОбщегоНазначения.ОписаниеТипаСтрока(11));
ТЗ.Колонки.Добавить(""Число"", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
ТЗ.Колонки.Добавить(""Значение"", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
ТЗ.Колонки.Добавить(""Булево"", Новый ОписаниеТипов(""Булево""));
"}
},
{0,
{"ВыделенныеСтроки",0,0,"","	МассивВыбранных = Элементы.Список.ВыделенныеСтроки;
	МассивКУдалению = Новый Массив;
	Для каждого ИдентификаторСтроки Из МассивКУдалению Цикл
		ТекДанные = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		МассивКУдалению.Добавить(ТекДанные.ИмяФайлаОбмена);
	КонецЦикла;
"}
}
},
{1,
{"Плюшки",1,0,"",""},
{0,
{"Подождать, Пауза",0,0,"","&НаКлиентеНаСервереБезКонтекста
Процедура аян_Подождать(Сек)
	
	ПланДата = ТекущаяДата() + Сек;
	
	Пока ТекущаяДата() < ПланДата Цикл
		//Ожидание количество сек
	КонецЦикла; 

КонецПроцедуры

//2.  из БСП 
ОбщегоНазначенияБТС.Пауза(1);

//3. ЗапускОтложеннойОперации
ПодключитьОбработчикОжидания(""ЗагрузкаДанныхОтправкаОтвета"", 0.1, Истина);

"}
}
},
{8,
{"Отладка",1,0,"",""},
{0,
{"ПереопределитьМетодНаВнешнююОбработку",0,0,"","ПутьКОбработке = ""\\pivo.local\Resource\Личные\Кириллов ПС\r\utap\work\аян_ОбменДанными.epf"";
ВнОбработка = аян_Разработка.ПолучитьВнешнююОбработкуПоПути(ПутьКОбработке);
Результат = ВнОбработка.requestByNamePOST(Запрос);

//Результат = ПродолжитьВызов(Запрос);

Возврат Результат;
"}
},
{0,
{"ДинамическоеУправлениеЗадачейРазработки",0,0,"","
	//Структура(""Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке"")
	СтруктураСведенийОЗадаче = аян_Разработка.ИнформациОЗадаче(""2021_058"", ПользователиКлиентСервер.ТекущийПользователь()); 
	
	СтандартныйКод = Истина;
	
	Если СтруктураСведенийОЗадаче = Неопределено Тогда
		//Типовой механизм
	Иначе	
		//Отладочный код
		Если СтруктураСведенийОЗадаче.РежимОтладки И СтруктураСведенийОЗадаче.ЕстьДоступКОтладке И СтруктураСведенийОЗадаче.Отключена = Ложь Тогда
			СтандартныйКод = Ложь;
			//Отладочный ход кода (например вызов внешней обработки)
			//Если  СтруктураСведенийОЗадаче.ЭтоВедущийРазработчик Тогда
				ПолныйПуть =  ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_058#УТАП Списание вычерков в реализациях на склад вычерков Кириллов П.С.  2021.09.02  ЦыганковДВ\ВводРасхожденийПоРезультатамПриемкиПолучателем.epf"";
			//Иначе	
			//	ПолныйПуть = ""R:\Обмен\! 1С Разработка\КирилловПС\УТАП\2021_058 Списание вычерков в реализациях на склад вычерков Кириллов П.С.  2021.09.02\КорректировкаЗаказаКлиентаПоРеализации.epf"";
			//КонецЕсли; 
			
			ИмяВнешенйФормы = ""Форма"";   
			
			//ПараметрыОткрытия = Новый Структура;
			//ПараметрыОткрытия.Вставить(""АдресДанных"", ПолучитьДанныеЭтойФормы());   
			
			//СтруктураОповещенияОЗакрытии = Новый Структура(""ИмяПроцедуры, Модуль"", ""ПослеЗакрытияФомры"", ЭтаФорма);
			
			ПараметрыФормы.Вставить(""аян_ПричинаКорректировки"", Объект.ПричинаКорректировки);
			аян_РазработкаКлиент.ОткрытьФормуВнешнейОбработки(ПолныйПуть, ИмяВнешенйФормы, ПараметрыФормы, ЭтаФорма,,, УникальныйИдентификатор);
			
		//Рабочий код	
		ИначеЕсли СтруктураСведенийОЗадаче.Отключена = Ложь Тогда
			//Доработанный в релизе ход выполнения кода
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если СтандартныйКод = Истина Тогда
		ОткрытьФорму(""Обработка.ВводРасхожденийПоРезультатамПриемкиПолучателем.Форма"", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли; 
"}
},
{0,
{"В начапе заимсвования",0,0,"","Если ИмяПользователя() <> ""Администратор"" ИЛИ ИмяПользователя() <> ""КирилловПС"" Тогда

	ПродолжитьВызов(Источник, Отказ, РежимПроведения);

КонецЕсли; 
"}
},
{0,
{"Вызов метод Внешн обработки",0,1,"внобр","ПолныйПуть = ""\\pivo.local\Resource\Личные\Кириллов ПС\r\utap\work\<?""Имя обработки"">.epf"";
Обработка = аян_Разработка.ПолучитьВнешнююОбработкуПоПути(ПолныйПуть);
Обработка.<?""Имя метода обработки"">(<?""Имена Парметров через запятую"">);


//Внутри конфигурации +
ИмяОбработки = ""аян_ОбменКД21"";
ОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОбработки);
ОбъектОбработка = ДополнительныеОтчетыИОбработкиВызовСервера.ПолучитьОбъектВнешнейОбработки(ОбработкаСсылка);
МакетПравилОбмена = ОбъектОбработка.ПолучитьМакет(""ПравилаПереносаДанных"");

//Внутри конфигурации открыть форму
ИмяОбработки = ""Обмен данными с ЕГАИС (АлкоСофтТрейд)""; //ЕГАИС
аян_Разработка.ПодключитьВнешнююОбработкуБСП(ИмяОбработки);

ПараметрыОбработки = Новый Структура(""аян_Регламент"", Истина);
ЕГАИС_Форма = ПолучитьФорму(""ВнешняяОбработка."" +  ""ЕГАИС"" + "".Форма"", ПараметрыОбработки);
ЕГАИС_Форма.Открыть();
"}
},
{2,
{"Вызовы",1,0,"",""},
{0,
{"ВыполнитьМетодКонфигурации",0,0,"","ОбщегоНазначения.ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено)
"}
},
{0,
{"ЗначениеВСтрокуВнутр",0,0,"","ЗначениеВСтрокуВнутр(Справочники.Банки.НайтиПоКоду(""041501781""));
ЗначениеИзСтрокиВнутр(""{""""#"""",7c33a33a-da11-4d79-81ef-19b992d1a1d5,18:a36f001e5848397d11e0e3638196595b}"");"}
}
},
{4,
{"ВнешниеФормы",1,0,"",""},
{0,
{"ОткрытиеФормВнОбраб",0,0,"","

#Область  ПодключитьЧЗХранилище

&НаКлиенте
Процедура ВыполнитьРегламентХранилище(Команда)
	ОткрытьФормуВнешнейОбработки(ПолныйПуть)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВнешнейОбработки(ПолныйПуть)
	
    мИмяФайла = ПолныйПуть;
    мИмяФормы = ""Форма"";
    
    мАдресХранилища = """";
    мРезультат = ПоместитьФайл(мАдресХранилища, мИмяФайла, , Ложь, Новый УникальныйИдентификатор);
    мИмяВнешнейОбработки = ПодключитьВнешнююОбработкуСервер(мАдресХранилища);
    мФорма = ПолучитьФорму(""ВнешняяОбработка."" + мИмяВнешнейОбработки + "".Форма"", , ЭтаФорма);
    мФорма.аян_СоздатьИОтправитьТТН_ЕГАИС_Регламент("""");
    
    //мФорма.Открыть();
    
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(мАдресХранилища)
	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
    Возврат ВнешниеОбработки.Подключить(мАдресХранилища,, Ложь, Защита);
КонецФункции

#КонецОбласти

#Область  ЧЗ_Подключение
 
&НаКлиенте
Процедура ВыполнитьРегламент(Команда)
	
	ВнешняяОбработка = кпс_Разработка.СоздатьВнешнююОработкуПоПути(ПолныйПуть);
	
	ОткрытьФормуРегламент();
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегламент()
	
	ПараметрыОбработки = Новый Структура(""аян_Регламент"", Истина);
	
    мФорма = ПолучитьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма"", ПараметрыОбработки, ЭтаФорма);
    
    мФорма.аян_СоздатьИОтправитьТТН_ЕГАИС_Регламент("""");
    
    //мФорма.Открыть();
    
КонецПроцедуры

#КонецОбласти

#Область  ЧЗ_БСП
 
&НаКлиенте
Процедура ВыполнитьРегламентБСП(Команда)
	ПодключитьВнешнююОбработкуБСП();
	ОткрытьФормуРегламент();
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьВнешнююОбработкуБСП()
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(""ЕГАИС"");
	ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОбработкаСсылка);
	
КонецПроцедуры

#КонецОбласти
 

//Пример:
//Присоединенной внешней обработки- заргистирированной в С.ВнешниеОбработкиОтчеты
Попытка
	
	ИмяОбработки = ""Обмен данными с ЕГАИС (АлкоСофтТрейд)""; //ЕГАИС
	астОбщегоНазначенияСервер.аян_ПодключитьВнешнююОбработкуБСП(ИмяОбработки);
	
	ПараметрыОбработки = Новый Структура(""аян_Регламент"", Истина);
    ЕГАИС_Форма = ПолучитьФорму(""ВнешняяОбработка."" +  ""ЕГАИС"" + "".Форма"", ПараметрыОбработки);
	ЕГАИС_Форма.Открыть();
	
	//ЕГАИС_Форма = ПолучитьФорму(""ВнешняяОбработка."" + ""ЕГАИС"" + "".Форма"");
	//ЕГАИС_Форма.аян_СоздатьИОтправитьТТН_ЕГАИС_Регламент("""");
	
	//ЕГАИС_Форма.Закрыть();
	
Исключение
	Сообщить(""Не удалось выполнить регламентную операцию по созданию и отправки ТТН ЕГАИС"");
КонецПопытки; 

"}
},
{0,
{"СозданиеВнешнейФормы",0,0,"","//Форма основная
&НаКлиенте
Процедура ОткрытьФорму2(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""АдресДанных"", ПолучитьДанныеЭтойФормы());
	
	ОткрытьФорму(""ВнешняяОбработка.ВнешняяОбработка1.Форма.Форма1"", СтруктураПараметров, ЭтотОбъект,,,,
					Новый ОписаниеОповещения(""ОткрытьФормы2Завершение"", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДанныеЭтойФормы()  
	
	СтруктураХранилища = Новый Структура;
	СтруктураХранилища.Вставить(""Объект"", РеквизитФормыВЗначение(""Объект""));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураХранилища);
	
КонецФункции // ПолучитьДанныеЭтойФормы


&НаКлиенте
Процедура ОткрытьФормы2Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	ПоместитьДанныеВЭтуФорму(РезультатЗакрытия);
	
КонецПроцедуры // ОткрытьФормы2Завершение

&НаСервере
Процедура ПоместитьДанныеВЭтуФорму(АдресДанных)  
	
	Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		
		ОбъектФормы2 = ПолучитьИзВременногоХранилища(АдресДанных).Объект;
		
		ЗначениеВРеквизитФормы(ОбъектФормы2, ""Объект"");
		
	КонецЕсли;
	
КонецПроцедуры // ПоместитьДанныеВЭтуФорму


//Форма2
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресДанных) Тогда
		
		ДанныеФормы = ПолучитьИзВременногоХранилища(Параметры.АдресДанных).Объект;
		
		ЗначениеВРеквизитФормы(ДанныеФормы, ""Объект"");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНовоеЗначение(Команда)
	
	Закрыть(ПолучитьДанныеЭтойФормы());
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДанныеЭтойФормы()  
	
	СтруктураХранилища = Новый Структура;
	СтруктураХранилища.Вставить(""Объект"", РеквизитФормыВЗначение(""Объект""));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураХранилища);
	
КонецФункции // ПолучитьДанныеЭтойФормы


"}
},
{0,
{"ОткрытьФормуПрограммИнтерф",0,0,"","&НаКлиенте
Процедура ЗаполнениеПанаПродаж(Команда)
	
	ПолныйПуть = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_050#УТАП Разработка мх Ведения План-факт анализа с учетом бонусов экспедиторам Кириллов П.С.  2021.08.08\ОбработкиРазработки\аян_НоменклатурныйСоставПланаПродаж.epf""; 
	ИмяВнешенйФормы = ""ФормаЗаписи"";   
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить(""АдресДанных"", ПолучитьДанныеЭтойФормы());   
	
	СтруктураОповещенияОЗакрытии = Новый Структура(""ИмяПроцедуры, Модуль"", ""ПослеЗакрытияФомры"", ЭтаФорма); 
	аян_РазработкаКлиент.ОткрытьФормуВнешнейОбработки(ПолныйПуть, ИмяВнешенйФормы, ПараметрыОткрытия, , СтруктураОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДанныеЭтойФормы()  
	
	СтруктураХранилища = Новый Структура;
	СтруктураХранилища.Вставить(""Объект"", РеквизитФормыВЗначение(""Объект""));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураХранилища, УникальныйИдентификатор);
	
КонецФункции // ПолучитьДанныеЭтойФормы

&НаКлиенте
//Какие параметры могут передаваться:
//ПараметрыЗакрытия, СтандартныеРеквизиты, ФормаРедактированияСтроки, СтруктураПараметров, ВыполняемоеОповещение, Результат, ИсточникВыбора 
//РезультатВопроса, ДополнительныеПараметры, ВыбранноеЗначение, ИсточникВыбора,
//РезультатЗакрытия?
Процедура ПослеЗакрытияФомры(ПараметрыЗакрытия, Параметры) Экспорт 
	
	ПоместитьДанныеВЭтуФорму(ПараметрыЗакрытия);
	
КонецПроцедуры 

&НаСервере
Процедура ПоместитьДанныеВЭтуФорму(АдресДанных)  
	
	Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		
		ОбъектФормы2 = ПолучитьИзВременногоХранилища(АдресДанных).Объект;
		
		ЗначениеВРеквизитФормы(ОбъектФормы2, ""Объект"");
		
	КонецЕсли;
	
КонецПроцедуры // ПоместитьДанныеВЭтуФорму


//Форма приемник
//TODO:  Для отладки внешней формы
#Область  ОтладкаУдалить

Если ЭтоАдресВременногоХранилища(Параметры.АдресДанных) Тогда
	
	ДанныевремХран = ПолучитьИзВременногоХранилища(Параметры.АдресДанных); 
	ДанныеФормы = ДанныевремХран.Объект;
	
	ЗначениеВРеквизитФормы(ДанныеФормы, ""Объект"");
	
КонецЕсли;

&НаКлиенте
Процедура ЗакрытьФормуВернутьЗначение(Команда)
	
	Закрыть(ПолучитьДанныеЭтойФормы());
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДанныеЭтойФормы()  
	
	СтруктураХранилища = Новый Структура;
	СтруктураХранилища.Вставить(""Объект"", РеквизитФормыВЗначение(""Объект""));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураХранилища);
	
КонецФункции // ПолучитьДанныеЭтойФормы

#КонецОбласти



//ОМ.аян_РазработкаКлиент

// Открывает форму внешней обработки
//
// Параметры:
//  ПолныйПуть  - Строка - Полный путь к внешней обработке, пример:
//                	ПолныйПуть = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_050#УТАП Разработка мх Ведения План-факт анализа с учетом бонусов экспедиторам Кириллов П.С.  2021.08.08\ОбработкиРазработки\аян_НоменклатурныйСоставПланаПродаж.epf""; 
//  ИмяВнешенйФормы  - Строка - Имя открываемой внешней формы, если не задана то стандартно ""Форма"" 
//					пример: ""ФормаЭлемента"", ""ФормаЗаписи""
//	ПараметрыОткрытия - Структура  - Параметров открытия формы
//  ФормаВладелец - Форма - из под которой происходит открытие формы
//	СтруктураОповещенияОЗакрытии - Структура -  с ключами ""ИмяПроцедурыПослеЗакрытияФормы"", ""Модуль""
//									ИмяПроцедуры - Строка - Имя процедцры в описании оповещении
//									Модуль - Программный модуль, процедура которого будет вызвана. 
//  ИмяОбработки - Строка - Если имя обработки отличается от имени сохраненной в полном пути.
//
&НаКлиенте
Процедура ОткрытьФормуВнешнейОбработки(ПолныйПуть, ИмяВнешенйФормы = ""Форма"", ПараметрыОткрытия = Неопределено, ФормаВладелец = Неопределено, СтруктураОповещенияОЗакрытии = Неопределено, ИмяОбработки = """")  Экспорт
	
	Если ИмяОбработки = """" Тогда
		МассивРазделенияСтроки = СтрРазделить(ПолныйПуть, ""\"");
		МестоВМассивеИмениОбработки = МассивРазделенияСтроки.Количество() - 1;
		ИмяОбработки = СтрРазделить(МассивРазделенияСтроки[МестоВМассивеИмениОбработки], ""."")[0];
	КонецЕсли; 
	
	аян_Разработка.СоздатьВнешнююОработкуПоПути(ПолныйПуть);
	
	Если СтруктураОповещенияОЗакрытии = Неопределено Тогда
		ОписОповещФормы = Неопределено;
	Иначе
		ОписОповещФормы = Новый ОписаниеОповещения(СтруктураОповещенияОЗакрытии.ИмяПроцедуры, СтруктураОповещенияОЗакрытии.Модуль);
	КонецЕсли; 

	ОткрытьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма"", ПараметрыОткрытия, ФормаВладелец,,,, ОписОповещФормы);
	
КонецПроцедуры


//ОМ.аян_Разработка

Процедура СоздатьВнешнююОработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь)  Экспорт
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	
КонецПроцедуры
"}
},
{0,
{"ОткрытьФормуДопОбработкиБСП",0,0,"","//Внутри конфигурации открыть форму
ИмяОбработки = ""мпп_Установка изменение цен номенклатуры акционным товарам"";
аян_Разработка.ПодключитьВнешнююОбработкуБСП(ИмяОбработки);

ПараметрыОткрытия = мпп_ПараемтрыОткрытяФормыУстановкиЦен();
ОповещенияОЗакрытии = Новый ОписаниеОповещения(""мпп_ПослеЗакрытияФормыИзмененияЦен"", ЭтаФорма);

ОткрытьФорму(""ВнешняяОбработка.мпп_УстановкаИзменениеЦенНоменклатурыАкционнымТоварам.Форма"", ПараметрыОткрытия,,,,, ОповещенияОЗакрытии);
"}
}
},
{1,
{"Логи",1,0,"",""},
{0,
{"Логирование",0,0,"","// взято от Олега О.Синхронизация УТАП
// Отправка писем с сообщением

Процедура Логирование_ОтправитьПисьмо(врАдрес, врТема, врТекстПисьма)
	
	Профиль = Новый ИнтернетПочтовыйПрофиль; 
	
	//Профиль.АдресСервераSMTP = ""smtp.mail.ru"";
	//Профиль.ПользовательSMTP = ""ayan_fsrar"";
	//Профиль.ПарольSMTP       = ""Pivo_999#"";	
	
	//Профиль.АдресСервераSMTP = ""mail.nic.ru"";
	////Профиль.ПользовательSMTP = ""ayan_fsrar@at-logistic.su"";
	////Профиль.ПарольSMTP       = ""o&@HMXo7"";	
	//
	//Профиль.ПользовательSMTP = ""fsrartomsk@at-logistic.su"";
	//Профиль.ПарольSMTP       = ""4Gh7bNS@d1"";
	
	Профиль.АдресСервераSMTP = ""smtp.mail.ru"";
	Профиль.ПользовательSMTP = ""ayan.fsrar@mail.ru"";
	Профиль.ПарольSMTP       = ""G4hKd@ge19#"";			
			
	Письмо = Новый ИнтернетПочтовоеСообщение; 
	Письмо.Организация = ""АТЛ"";
	Письмо.Отправитель = ""ayan.fsrar@mail.ru"";		
	Письмо.Тема        = врТема;
		
	врТекст = Письмо.Тексты.Добавить(врТекстПисьма);
	врТекст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				
	Письмо.Получатели.Добавить(СокрЛП(врАдрес));
	Письмо.Получатели.Добавить(СокрЛП(""nikolaenko@9bit.ru""));
	Письмо.Получатели.Добавить(СокрЛП(""Bt_Oleg@mail.ru""));
	Письмо.Получатели.Добавить(СокрЛП(""a.sitkova@at-logistic.su""));
		
	ПисьмоОтправлено = Ложь;
		
	Попытка
		Почта = Новый ИнтернетПочта; 
		Почта.Подключиться(Профиль);
		Почта.Послать(Письмо); 
		Почта.Отключиться();
		ПисьмоОтправлено = Истина;
	Исключение
		ЗаписатьОшибку1СвЛогФайл(""Логирование. Отправка писем."", ""Ошибка отправки письма на адрес: "" + СокрЛП(врАдрес) + "", тема письма: "" + СокрЛП(врТема), ИнформацияОбОшибке(), Истина);
	КонецПопытки;	
			
КонецПроцедуры	


// Запись ошибок 1С в LogERR.txt

Процедура ЗаписатьОшибку1СвЛогФайл(Событие, ТекстОшибки, ИнфОбОшибке = Неопределено, ЭтоОбработкаИсключения = Ложь)
	
	Попытка 
		
		ЛогОшибок1С = Новый ЗаписьТекста(КаталогЛогФайлов + ""\"" + ""LogErrors"" + Формат(ТекущаяДата(), ""ДФ=yyyyMMdd"") + "".txt"", КодировкаТекста.ANSI, ,Истина);
	
		ЛогТекстОшибки = ТекстОшибки;
		
		Если ЭтоОбработкаИсключения Тогда
			
			ЛогТекстОшибки = ЛогТекстОшибки + "" ## Обработка исключения! Описание = "" + СокрЛП(ИнфОбОшибке.Описание) + 
										  		""; Имя модуля = ""                     + СокрЛП(ИнфОбОшибке.ИмяМодуля) + 
										  	    ""; Номер строки = ""                   + СокрЛП(ИнфОбОшибке.НомерСтроки) + 
										  		""; Исходная строка = ""                + СокрЛП(ИнфОбОшибке.ИсходнаяСтрока) + 
										  		""; Причина = ""    		              + СокрЛП(ИнфОбОшибке.Причина); 										  
										  
		КонецЕсли;	
	
		ЛогОшибок1С.ЗаписатьСтроку(""<-- ## "" + ТекущаяДата() + "" ## "" + Строка(ИдКПК) + "" ("" + Строка(ТекАгент) + "")"" + "" ## "" + ""Событие = "" + СокрЛП(Событие) + "" ## "" + СокрЛП(ЛогТекстОшибки));	
		ЛогОшибок1С.ЗаписатьСтроку("""");	
		
		ЛогОшибок1С.Закрыть();	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	"}
}
},
{0,
{"ОтладкаЗапроса",0,0,"ОтлЗап","пр_Общий.ЗапросВСтрокуXML(Запрос, Истина, ""\\pivo.local\Resource\Личные\Кириллов ПС\Буфер\ЗапросВСтрокуXML.txt"")
пр_Общий.ЗапросВСтрокуXML(Запрос, Истина, ""\\192.168.100.11\core-sync\Разработка1С\ЗапросВСтрокуXML.txt"")"}
}
},
{3,
{"ИР_Иследование",1,0,"",""},
{0,
{"ирОбщий.ОтЛкс(Запрос)",0,0,"","ирОбщий.ОтЛкс(Запрос)"}
},
{0,
{"ДатаСозданияСсылки",0,0,"","&НаСервереБезКонтекста
Функция ДатаСозданияСсылки(Ссылка)
    ГУИД = Ссылка.УникальныйИдентификатор();
    Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
    Разрядность = СтрДлина(Строка16);
    ЧислоСек = 0;
    Для Позиция = 1 По Разрядность Цикл
        ЧислоСек = ЧислоСек + Найти(""123456789abcdef"",Сред(Строка16,Позиция,1))*Pow(16,Разрядность - Позиция);
    КонецЦикла;
    ЧислоСек = ЧислоСек / 10000000;
    Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
КонецФункции   


&НаКлиенте
Процедура СсылкаПриИзменении(Элемент)
	ДатаСоздания = ДатаСозданияСсылки(Ссылка);
КонецПроцедуры
"}
},
{0,
{"Ссылка по навигационнойСсылке",0,0,"","НС = ""e1cib/data/Документ.РеализацияТоваровУслуг?ref=83881831bf2dc5c011ebc9d34faf1fa4"";

ПерваяТочка = Найти(НС, ""e1cib/data/"");
ВтораяТочка = Найти(НС, ""?ref="");

ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + "".ПустаяСсылка""));
СтрЗамены = Сред(НС, ВтораяТочка + 5);
ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, ""00000000000000000000000000000000"", СтрЗамены);
Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);

//проверка
УИД = Ссылка.УникальныйИдентификатор();
Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД);
"}
}
},
{6,
{"Ссылки",1,0,"",""},
{0,
{"Ссылки",0,0,"","Док = ""DocumentRef.ПриобретениеТоваровУслуг"";
Справ = ""CatalogRef.Организации"";
РегистрНакопления = ""AccumRg"";
РегистрСведений = ""InfoRg"";

Источник = XMLЗначение(Тип(""СправочникСсылка.СерииНоменклатуры""), ""ae9a1040-20f4-11ec-83be-ac1f6b8732b0"");

УИН = Новый УникальныйИдентификатор(""ae9a1040-20f4-11ec-83be-ac1f6b8732b0"");
Источник2 = Справочники.СерииНоменклатуры.ПолучитьСсылку(УИН);


//ТипXML
//Отправка
СтруктураОбъекта = Новый Структура();
ТипXML = XMLТипЗнч(ИсходныйОбъект);
СтруктураОбъекта.Вставить(""ИмяТипа"", ТипXML.ИмяТипа);
СтруктураОбъекта.Вставить(""Ссылка"", XMLСтрока(ИсходныйОбъект.Ссылка));

//Прием
ИмяТипа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, ""ИмяТипа"", Неопределено); 	

Если ИмяТипа <> Неопределено Тогда
	
	Тип = ИзXMLТипа(ИмяТипа, """");
	ОбъектСсылка = XMLЗначение(Тип, СтруктураПараметров.Ссылка);
	
КонецЕсли; 

Если ОбъектСсылка = Неопределено ИЛИ СтрНайти(Строка(ОбъектСсылка),""Объект не найден"") > 0 Тогда
	//Запрос по полям поиска
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		МенеджерОбъекта = Справочники[ОбъектСсылка.Метаданные().Имя];
"}
},
{0,
{"CatalogRef",0,0,"рефс","СсылкаНаОбъект = пр_Общий.СсылкаПоТипXML(""CatalogRef_<?""Выберите тип"", ВыборТипа>"", ""<?""ссылка строкой XML"">"");
<?>
"}
},
{0,
{"DocumentRef",0,0,"рефд","СсылкаНаОбъект = пр_Общий.СсылкаПоТипXML(""DocumentRef_<?""Выберите тип"", ВыборТипа>"", ""<?""ссылка строкой XML"">"");
<?>
"}
},
{0,
{"ChartOfCharacteristicTypesRef",0,0,"рефп","СсылкаНаОбъект = пр_Общий.СсылкаПоТипXML(""ChartOfCharacteristicTypesRef_<?""Выберите тип"", ВыборТипа>"", ""<?""ссылка строкой XML"">"");
<?>
"}
},
{0,
{"AccumRg",0,0,"рефРН","""AccumRg.ТоварыОрганизаций"","}
},
{0,
{"InfoRg",0,0,"рефРС","""InfoRg.ЦеныНоменклатуры"""}
}
},
{12,
{"ОМ_Разработка",1,0,"",""},
{0,
{"РазработкаКлиент",0,0,"","

// Открывает форму внешней обработки
//
// Параметры:
//  ПолныйПуть  - Строка - Полный путь к внешней обработке, пример:
//                	ПолныйПуть = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_050#УТАП Разработка мх Ведения План-факт анализа с учетом бонусов экспедиторам Кириллов П.С.  2021.08.08\ОбработкиРазработки\аян_НоменклатурныйСоставПланаПродаж.epf""; 
//  ИмяВнешенйФормы  - Строка - Имя открываемой внешней формы, если не задана то стандартно ""Форма"" 
//					пример: ""ФормаЭлемента"", ""ФормаЗаписи""
//	ПараметрыОткрытия - Структура  - Параметров открытия формы
//  ФормаВладелец - Форма - из под которой происходит открытие формы
//	СтруктураОповещенияОЗакрытии - Структура -  с ключами ""ИмяПроцедурыПослеЗакрытияФормы"", ""Модуль""
//									ИмяПроцедуры - Строка - Имя процедцры в описании оповещении
//									Модуль - Программный модуль, процедура которого будет вызвана. 
//  ИмяОбработки - Строка - Если имя обработки отличается от имени сохраненной в полном пути.
//
&НаКлиенте
Процедура ОткрытьФормуВнешнейОбработки(ПолныйПуть, ИмяВнешенйФормы = ""Форма"", ПараметрыОткрытия = Неопределено, ФормаВладелец = Неопределено, СтруктураОповещенияОЗакрытии = Неопределено, ИмяОбработки = """", Уникальность = Неопределено)  Экспорт
	
	Если ИмяОбработки = """" Тогда
		МассивРазделенияСтроки = СтрРазделить(ПолныйПуть, ""\"");
		МестоВМассивеИмениОбработки = МассивРазделенияСтроки.Количество() - 1;
		ИмяОбработки = СтрРазделить(МассивРазделенияСтроки[МестоВМассивеИмениОбработки], ""."")[0];
	КонецЕсли; 
	
	аян_Разработка.СоздатьВнешнююОбработкуПоПути(ПолныйПуть);
	
	Если СтруктураОповещенияОЗакрытии = Неопределено Тогда
		ОписОповещФормы = Неопределено;
	ИначеЕсли ТипЗнч(СтруктураОповещенияОЗакрытии) = Тип(""ОписаниеОповещения"") Тогда
		ОписОповещФормы = СтруктураОповещенияОЗакрытии;
	Иначе
		ОписОповещФормы = Новый ОписаниеОповещения(СтруктураОповещенияОЗакрытии.ИмяПроцедуры, СтруктураОповещенияОЗакрытии.Модуль);
	КонецЕсли; 

	ОткрытьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма"", ПараметрыОткрытия, ФормаВладелец, Уникальность,,, ОписОповещФормы);
	
КонецПроцедуры
"}
},
{0,
{"ОМ_кпс_Разработка",0,0,"","
#Область ПрограммныйИнтерфейс

Функция ПолучитьСтруктуруАдресаИнформационнойБазы()  Экспорт
	
	СтрСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	НачалоИмениИБ = СтрНайти(СтрСоединенияИБ,""Ref="");
	ЭтоСерверноеПодключение = ?(СтрНайти(СтрСоединенияИБ, ""Srvr""), Истина, Ложь);
	
	СерверИБ = Сред(СтрСоединенияИБ, 7 ,НачалоИмениИБ - 9);
	ИмяИБ = Сред(СтрСоединенияИБ, НачалоИмениИБ + 4,СтрДлина(СтрСоединенияИБ) - НачалоИмениИБ - 4);
	ИмяИБ = СтрЗаменить(ИмяИБ, """""""", """");
	
	//Результат = Новый Структура(""СерверИБ, ИмяИБ, ЭтоСерверноеСоединение, ЭтоРабочаяБД"", 
	//	СерверИБ, ИмяИБ, ЭтоСерверноеПодключение, оду_ОбщийПовтИсп.ЭтаРабочаяБД()); 
	Результат = Новый Структура(""СерверИБ, ИмяИБ, ЭтоСерверноеСоединение"", 
		СерверИБ, ИмяИБ, ЭтоСерверноеПодключение); 
	
	Возврат  Результат;

КонецФункции // ()

//СтрокаСоединенияИнформационнойБазы()	= ""Srvr=""at-sql5"";Ref=""ytaptest6"";
// ИмяИБ = ""ytaptest6""
Функция ПолучитьИмяИнформационнойБазы()  Экспорт
	
	СтрСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	НачалоИмениИБ = СтрНайти(СтрСоединенияИБ,""Ref="");
	
	ИмяИБ = Сред(СтрСоединенияИБ, НачалоИмениИБ + 4,СтрДлина(СтрСоединенияИБ) - НачалоИмениИБ - 4);
	
	ИмяИБ = СтрЗаменить(ИмяИБ, """""""", """");
	
	Возврат  ИмяИБ;

КонецФункции // ()

Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = ""БухгалтерияПредприятия"" ИЛИ МетаданныеИмя = ""БухгалтерияПредприятияБазовая"" ИЛИ МетаданныеИмя = ""Общепит1С"" ИЛИ МетаданныеИмя = ""БИТРесторан"" Тогда
		Возврат ""БП"";
	ИначеЕсли МетаданныеИмя = ""ЗарплатаИУправлениеПерсоналом"" ИЛИ МетаданныеИмя = ""ЗарплатаИУправлениеПерсоналомБазовая"" ИЛИ МетаданныеИмя = ""ЗарплатаИУправлениеПерсоналомКОРП"" Тогда
		Возврат ""ЗУП"";
	ИначеЕсли Лев(МетаданныеИмя, 19) = ""УправлениеТорговлей"" ИЛИ МетаданныеИмя = ""АгентПлюсУправлениеТорговлей"" ИЛИ МетаданныеИмя = ""УправлениеПредприятием"" ИЛИ МетаданныеИмя = ""КомплекснаяАвтоматизация"" Тогда
		МетаданныеСиноним = Метаданные.Синоним;
		РедакцияКонфигурации = Прав(СокрЛП(МетаданныеСиноним), 4);
		Возврат ""УТ"";
	ИначеЕсли МетаданныеИмя = ""KT2000_Alcohol_Trade"" Тогда	
		Возврат ""УТАП"";	
	ИначеЕсли МетаданныеИмя = ""Розница"" Тогда
		Возврат ""Р"";
	ИначеЕсли МетаданныеИмя = ""КомплекснаяАвтоматизация"" ИЛИ МетаданныеИмя = ""УправлениеПроизводственнымПредприятием"" Тогда
		Возврат ""КА"";
	ИначеЕсли МетаданныеИмя = ""БухгалтерияБюджетногоУчреждения"" ИЛИ МетаданныеИмя = ""БухгалтерияБюджетногоУчрежденияБазовая"" Тогда
		Возврат ""ББУ"";
	ИначеЕсли МетаданныеИмя = ""БухгалтерияГосударственногоУчреждения"" ИЛИ МетаданныеИмя = ""БухгалтерияГосударственногоУчрежденияБазовая"" Тогда
		Возврат ""БГУ"";
	ИначеЕсли МетаданныеИмя = ""ЗарплатаИКадрыБюджетногоУчреждения"" ИЛИ МетаданныеИмя = ""БазоваяФункциональностьКадрыЗарплата"" Тогда
		Возврат ""ЗБУ"";
	ИначеЕсли МетаданныеИмя = ""БухгалтерияПредприятияКОРП"" Тогда
		Возврат ""БПКОРП"";
	ИначеЕсли МетаданныеИмя = ""БухгалтерияАвтономногоУчрежденияКОРП"" Тогда
		Возврат ""БАУКОРП"";
	ИначеЕсли МетаданныеИмя = ""БухгалтерияАвтономногоУчреждения"" ИЛИ МетаданныеИмя = ""БухгалтерияАвтономногоУчрежденияБазовая"" Тогда
		Возврат ""БАУ"";
	ИначеЕсли Лев(МетаданныеИмя, 8) = ""Трактиръ"" Тогда
		Возврат ""ТЪ""; 
	ИначеЕсли МетаданныеИмя = ""УправлениеНебольшойФирмой"" ИЛИ МетаданныеИмя = ""УНФУправлениеПредприятиемОбщепита"" Тогда
		Возврат ""УНФ"";	
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции // ИДКонфигурации()

#Область  ВнешниеОбработки
 
Процедура СоздатьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, Обработка = Истина)  Экспорт
		
	Если СтрНайти(Путь, ""W:"")  Тогда
		Путь = СтрЗаменить(Путь, ""W:"", ""\\pivo.local\Resource\Личные\Кириллов ПС"");
	КонецЕсли;
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	Если Обработка = Истина Тогда
		ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	Иначе
		ВнешняяОбработка = ВнешниеОтчеты.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, Обработка = Истина)  Экспорт
		
	Если СтрНайти(Путь, ""W:"")  Тогда
		Путь = СтрЗаменить(Путь, ""W:"", ""\\pivo.local\Resource\Личные\Кириллов ПС"");
	КонецЕсли;
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	Если Обработка = Истина Тогда
		ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	Иначе
		ВнешняяОбработка = ВнешниеОтчеты.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	КонецЕсли;
	
	Возврат  ВнешняяОбработка;
	
КонецФункции

Функция ВыполнитьМетодМодуля(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = ""ВнОбработка."" + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, ""ytaptest6"");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьМетодВнешнейОбработкиПоПути(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = ""ВнОбработка."" + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, ""ytaptest6"");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

//Подключение обработки или отчета БСП
Функция ПодключитьВнешнююОбработкуБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = СсылкаВнешнейОбработкаБСП(ИмяДопОбработки);
	ИмяВнешнейОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОбработкаСсылка);
	Возврат  ИмяВнешнейОбработки;
КонецФункции

//Получение обработки или отчета БСП
Функция ВнешняяОбработкаБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = СсылкаВнешнейОбработкаБСП(ИмяДопОбработки);
	ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ДопОбработкаСсылка);
	Возврат  ВнешняяОбработка;
КонецФункции

//Получение обработки или отчета БСП
Функция СсылкаВнешнейОбработкаБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяДопОбработки);
	Возврат  ДопОбработкаСсылка;
КонецФункции

Функция ВыполнитьМетодФункцииПоИмени(ИмяМетода, МенеджерОбработки = Неопределено, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 
	
	Перем Результат;
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	
	Выполнить(""Результат = "" + ИмяМетодаСПараметрами);
	
	Возврат Результат;
	
КонецФункции

Функция МетодСПараметрамиПоИмени(ИмяМетода)
	
	НачальныйНомерСтрокиПараметров = СтрНайти(ИмяМетода, ""("");
	
	ИмяМетодаСПараметрами = Лев(ИмяМетода, НачальныйНомерСтрокиПараметров);
	ТекстПараметров = Сред(ИмяМетода,НачальныйНомерСтрокиПараметров, СтрДлина(ИмяМетода) - НачальныйНомерСтрокиПараметров - 1);
	
	Если ТекстПараметров = """" Тогда
		Возврат  ИмяМетодаСПараметрами + "")"";
	КонецЕсли;
	
	МассивПараметров = СтрРазделить(ТекстПараметров, "","");
	
	Для НомерПараметра = 0 По МассивПараметров.ВГраница() Цикл
		ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + ""П"" + НомерПараметра + "","";		
	КонецЦикла; 
	
	ИмяМетодаСПараметрами = Лев(ИмяМетодаСПараметрами, СтрДлина(ИмяМетодаСПараметрами) - 1) + "")"";
	
	Возврат  ИмяМетодаСПараметрами;

КонецФункции 

Функция ВыполнитьМетодОткрытойОбработки(ОбъектОбработки, ИмяМетода)  Экспорт
	ОбъектОбработка = ДанныеФормыВЗначение(ОбъектОбработки, Тип(""ДанныеФормыСтруктура""));
	Результат = ВыполнитьМетодФункцииПоИмени(""ОбъектОбработка."" + ИмяМетода);
	Возврат  Результат;
КонецФункции

Функция ВыполнитьМетодМодуляПоСтруктуре(Путь, ИмяМетода, ПараметрыОбработки, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
//Функция ВыполнитьМетодФункцииПоСтруктуре(ИмяМетода, МенеджерОбработки = Неопределено, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 

	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоСтруктуре(ИмяМетода, ПараметрыОбработки, П0, П1, П2, П3, П4, П5, П6, П7, П8, П9);
	ТекстДляВыполнения = ""ВнОбработка."" + ИмяМетодаСПараметрами;
	
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

Функция МетодСПараметрамиПоСтруктуре(ИмяМетода, ПараметрыОбработки, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)
	
	ИмяМетодаСПараметрами = ИмяМетода + ""("";
	
	Сч = 0;
	Для каждого КлючЗначение Из ПараметрыОбработки Цикл
		ИмяПараметра = ""П"" + Сч;
		Значение = КлючЗначение.Значение;;
		//пока тупо
		Если ИмяПараметра = ""П0"" Тогда
			П0 = Значение;
		ИначеЕсли ИмяПараметра = ""П1"" Тогда 
			П1 = Значение;
		ИначеЕсли ИмяПараметра = ""П2"" Тогда 
			П2 = Значение;
		ИначеЕсли ИмяПараметра = ""П3"" Тогда 
			П3 = Значение;
		ИначеЕсли ИмяПараметра = ""П4"" Тогда 
			П4 = Значение;
		ИначеЕсли ИмяПараметра = ""П5"" Тогда 
			П5 = Значение;
		ИначеЕсли ИмяПараметра = ""П6"" Тогда 
			П6 = Значение;
		ИначеЕсли ИмяПараметра = ""П7"" Тогда 
			П7 = Значение;
		ИначеЕсли ИмяПараметра = ""П8"" Тогда 
			П9 = Значение;
		ИначеЕсли ИмяПараметра = ""П9"" Тогда 
			П9 = Значение;
		КонецЕсли; 
		
		//[ИмяПараметра] = КлючЗначение.Значение; 
		ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + ""П"" + Сч + "","";		
		Сч = Сч + 1;
	КонецЦикла; 
	
	//КолПараметров = ПараметрыОбработки.Количество() - 1;
	// 
	//Для НомерПараметра = 0 По КолПараметров Цикл
	//	ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + ""П"" + НомерПараметра + "","";		
	//КонецЦикла;
	
	ИмяМетодаСПараметрами = Лев(ИмяМетодаСПараметрами, СтрДлина(ИмяМетодаСПараметрами) - 1) + "")"";
	
	Возврат  ИмяМетодаСПараметрами;

КонецФункции 

#КонецОбласти

#Область  РаботаЗапросов

Функция СтруктураПоЗапросу(РЗ)	Экспорт
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	КолонкиРезультата = РЗ.Колонки;
	СтруктураПоЗапросу = Новый Структура(); 
	Для каждого Стр Из КолонкиРезультата Цикл
		СтруктураПоЗапросу.Вставить(Стр.Имя);	
	КонецЦикла; 
	
	Если ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоЗапросу, ВДЗ); 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат  СтруктураПоЗапросу;
	
КонецФункции 

Функция МассивСтруктурПоЗапросу(РЗ)	Экспорт
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	КолонкиРезультата = РЗ.Колонки;
	СтруктураПоЗапросу = Новый Структура(); 
	Для каждого Стр Из КолонкиРезультата Цикл
		СтруктураПоЗапросу.Вставить(Стр.Имя);	
	КонецЦикла; 
	
	МассивСтруктурПоЗапросу = Новый Массив;
	Пока ВДЗ.Следующий() Цикл
		СтруктураНастроекОбмена = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоЗапросу));
		ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ВДЗ); 
		МассивСтруктурПоЗапросу.Добавить(СтруктураНастроекОбмена);	
	КонецЦикла;
	
	Возврат МассивСтруктурПоЗапросу;
	
КонецФункции 

#КонецОбласти
 

// Возвращает Информацию о задаче разработки
//	для динамического управления выполнения кода, отключения/включения задачи
//
// Параметры:
// НомерЗадачи - номер задачи по трекеру заач - Например : ""2021_059""
//					Полный номер задачи: ayan#2021_059#УТАП 
//					ayan - проект задачи
//					2021 - Год создания, назначения задачи
//                  059  - Порядковый номер
//                  УТАП - Конфигурация - место разработки
//  ТекущийПользователь  - СправочникСсылка - Пользователи ИБ
//
// Возвращаемое значение: СтруктураСведенийОЗадаче:
//   Структура, Неопределено  - СтруктураСКлючами: (""Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке"")
Функция ИнформациОЗадаче(НомерЗадачи, ТекущийПользователь)   Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	аян_СписокЗадачРазработки.Задача.Ссылка КАК Задача,
		|	аян_СписокЗадачРазработки.Отключена КАК Отключена,
		|	аян_СписокЗадачРазработки.РежимОтладки КАК РежимОтладки,
		|	аян_СписокЗадачРазработки.Задача.ВедущийРазработчик = &ТекущийПользователь КАК ЭтоВедущийРазработчик,
		|	ЕСТЬNULL(аян_ЗадачиРазработкиТестировщики.Тестировщик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоТестировщик,
		|	ЕСТЬNULL(аян_ЗадачиРазработкиРазработчики.Разработчик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоРазработчик,
		|	аян_СписокЗадачРазработки.Задача.Контролер = &ТекущийПользователь КАК ЭтоКонтролер
		|ПОМЕСТИТЬ ВТ_ДанныеОЗадаче
		|ИЗ
		|	РегистрСведений.аян_СписокЗадачРазработки КАК аян_СписокЗадачРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.аян_ЗадачиРазработки.Тестировщики КАК аян_ЗадачиРазработкиТестировщики
		|		ПО (аян_ЗадачиРазработкиТестировщики.Ссылка = аян_СписокЗадачРазработки.Задача)
		|			И (аян_ЗадачиРазработкиТестировщики.Тестировщик = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.аян_ЗадачиРазработки.Разработчики КАК аян_ЗадачиРазработкиРазработчики
		|		ПО аян_СписокЗадачРазработки.Задача = аян_ЗадачиРазработкиРазработчики.Ссылка
		|			И (аян_ЗадачиРазработкиРазработчики.Разработчик = &ТекущийПользователь)
		|ГДЕ
		|	аян_СписокЗадачРазработки.Задача.Код = &Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеОЗадаче.Задача КАК Задача,
		|	ВТ_ДанныеОЗадаче.Отключена КАК Отключена,
		|	ВТ_ДанныеОЗадаче.РежимОтладки КАК РежимОтладки,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик КАК ЭтоВедущийРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоТестировщик КАК ЭтоТестировщик,
		|	ВТ_ДанныеОЗадаче.ЭтоРазработчик КАК ЭтоРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЭтоКонтролер,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоТестировщик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЕстьДоступКОтладке
		|ИЗ
		|	ВТ_ДанныеОЗадаче КАК ВТ_ДанныеОЗадаче"";
	
	Запрос.УстановитьПараметр(""Код"", НомерЗадачи);
	Запрос.УстановитьПараметр(""ТекущийПользователь"", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	СтруктураСведенийОЗадаче = Новый Структура(""Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке"");
	
	Если  ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСведенийОЗадаче, ВДЗ); 
	КонецЕсли; 
	
	Возврат   СтруктураСведенийОЗадаче;
	
КонецФункции

//Проверка струкутры
Функция ЗначениеРеквизитаОбъектаМожетНеБыть(Объект, ИмяРеквизита)	Экспорт
	
	СтруктураПоиска = Новый Структура(ИмяРеквизита, Неопределено); 
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Объект); 
	Возврат  СтруктураПоиска[ИмяРеквизита];
	
КонецФункции 

#КонецОбласти

#Область  РаботаС_ССЫЛКАМИ

//МенеджерТипа - 	ОбъектМенеджер - ДокументМенеджер.ПриобретениеТоваровУслуг
Функция СсылкаПоGUID(МенеджерТипа, УникальныйИдентификаторСтрокой)     Экспорт
	
	Попытка
		
		Если УникальныйИдентификаторСтрокой = """" Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		
		СсылкаНаОбъект1С = МенеджерТипа.ПолучитьСсылку(УникальныйИдентификатор);
		
		//Если СтрНайти(СсылкаНаОбъект1С, ""Объект не найден"") > 0 Тогда
		Если СсылкаСуществует(СсылкаНаОбъект1С) Тогда
			Возврат СсылкаНаОбъект1С;
		Иначе
			Возврат Неопределено;	
		КонецЕсли; 
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции 

//в 2-а разы быстрее функции.СсылкаПоGUID
//ИмяТипа - Строка - ""DocumentRef.ПриобретениеТоваровУслуг""
Функция СсылкаПоТипXML(ИмяТипа, УникальныйИдентификаторСтрокой)     Экспорт
	
	Попытка
		
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		Тип = ИзXMLТипа(ИмяТипа, """");
		СсылкаНаОбъект1С = XMLЗначение(Тип, УникальныйИдентификаторСтрокой);
		
		//Если СсылкаНаОбъект1С = Неопределено ИЛИ СтрНайти(Строка(СсылкаНаОбъект1С),""Объект не найден"") > 0 Тогда
		Если СсылкаСуществует(СсылкаНаОбъект1С) Тогда
			Возврат СсылкаНаОбъект1С;
		Иначе
			Возврат Неопределено;	
		КонецЕсли; 
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции 

Функция СсылкаСуществует(СсылкаНаОбъект1С) Экспорт
	
	Попытка
		
		ИмяТипа = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;

	    ИмяТаблицы = СтрЗаменить(ИмяТипа, ""Ref."", ""."");
	    
	    ТекстЗапроса = ""ВЫБРАТЬ Ссылка ИЗ [ИмяТаблицы] ГДЕ Ссылка = &Ссылка"";
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""[ИмяТаблицы]"", ИмяТаблицы);
	    
	    Запрос = Новый Запрос;
	    Запрос.Текст = ТекстЗапроса;
	    Запрос.УстановитьПараметр(""Ссылка"", СсылкаНаОбъект1С);
	    
	    УстановитьПривилегированныйРежим(Истина);
	    СсылкаСуществует = НЕ Запрос.Выполнить().Пустой();
	    УстановитьПривилегированныйРежим(Ложь);
	    Возврат СсылкаСуществует;
		
	Исключение
	    Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Функция ИмяТипаXMLПоСсылке(СсылкаНаОбъект1С) Экспорт
	
	Попытка
		ИмяТипа = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;
	    Возврат ИмяТипа;
		
	Исключение
	    Возврат """";
	КонецПопытки; 
	
КонецФункции

Функция ДатаСозданияСсылки(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ГУИД = Ссылка.УникальныйИдентификатор();
	Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
	Разрядность = СтрДлина(Строка16);
	ЧислоСек = 0;
	Для Позиция = 1 По Разрядность Цикл
		ЧислоСек = ЧислоСек + Найти(""123456789abcdef"",Сред(Строка16,Позиция,1))*Pow(16,Разрядность - Позиция);
	КонецЦикла;
	ЧислоСек = ЧислоСек / 10000000;
	ЧислоСек = ЧислоСек + 60*60*3; //Задержка по местному времени
	Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
		
КонецФункции

#Область  НавигационнойСсылки

Функция ПолучитьСсылкуИзНавигационной(НС)  Экспорт
	
	Попытка
		ПерваяТочка = Найти(НС, ""e1cib/data/"");
		ВтораяТочка = Найти(НС, ""?ref="");
		
		ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
		ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + "".ПустаяСсылка""));
		ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, ""00000000000000000000000000000000"", Сред(НС, ВтораяТочка + 5));
		Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
		
		Возврат Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

#КонецОбласти
 
#КонецОбласти

//проверка строки по шаблону, источник https://infostart.ru/1c/articles/464971/     
Функция НайтиСтрокуРегуляроеВыражение(Строка, Фасет) Экспорт
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                ""<Model xmlns=""""http://v8.1c.ru/8.1/xdto"""" xmlns:xs=""""http://www.w3.org/2001/XMLSchema"""" xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:type=""""Model"""">
                |<package targetNamespace=""""sample-my-package"""">
                |<valueType name=""""testtypes"""" base=""""xs:string"""">
                |<pattern>"" + Фасет + ""</pattern>
                |</valueType>
                |<objectType name=""""TestObj"""">
                |<property xmlns:d4p1=""""sample-my-package"""" name=""""TestItem"""" type=""""d4p1:testtypes""""/>
                |</objectType>
                |</package>
                |</Model>"");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить(""sample-my-package"");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить(""TestObj""));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции

#Область  ГенерацияСлучайного

// генерирация произвольной длины символов, состоящий из Больших, малых латинских букв и чисел, например ""DY80c8Yf7""
Функция СгенерироватьСлучайныйТекст(ДлинаСтроки)  Экспорт
	
	ТекстСгенерированнойСтроки = """";
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Для Сч = 1 по ДлинаСтроки Цикл
        ТекстСгенерированнойСтроки = ТекстСгенерированнойСтроки + ГенерацияСлучайногоСимвола(ГСЧ);
	КонецЦикла; 
	
	Возврат ТекстСгенерированнойСтроки;
	
КонецФункции

Функция ГенерацияСлучайногоСимвола(ГСЧ)
	
	СлучайнаяСтрока = """";
	Набор = ГСЧ.СлучайноеЧисло(1,3);
	
	Если Набор = 1 Тогда
		// это число
		СлучайныйСимвол = ГСЧ.СлучайноеЧисло(0,9);    
	ИначеЕсли Набор = 2 Тогда
		// это Большая буква латиницы
		СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(65,90));
	ИначеЕсли Набор = 3 Тогда
		// это маленькая буква латиницы
		СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(97,122));
	КонецЕсли;
	СлучайнаяСтрока = СлучайнаяСтрока + СлучайныйСимвол;
	
	Возврат(СлучайнаяСтрока);
	
КонецФункции

#КонецОбласти
 

#Область  СлужебныеБСП

#Область  ЗначениеРеквизитовНаКлиенте
 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
КонецФункции 

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции 

#КонецОбласти

Функция РезультатЗаписиДопСведений(ОбъектСсылка, Свойство, Значение, Удалить = Ложь) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		//Регистрация чз доп сведения
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектСсылка;
		Запись.Свойство = Свойство;
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(ОбъектСсылка) И ЗначениеЗаполнено(Свойство) И ЗначениеЗаполнено(Значение) Тогда 
			Запись.Значение = Значение;
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

Функция РезультатЗаписиДопРеквизита(Объект, Свойство, Значение, Записывать = Истина, Удалить = Ложь)  Экспорт
	
	Результат = Истина;
	
	Попытка
		
		//Если НЕ ЗначениеЗаполнено(Объект) Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		//TODO:  проверка на объект, ссылку
		//Если ТипЗнч(Объект) = Тип(""ДокументОбъект.РеализацияТоваровУслуг"") Тогда
		//
		//КонецЕсли;
		
		ДопРеквизиты = Объект.ДополнительныеРеквизиты;
		
		МассивПоискаСтроки = ДопРеквизиты.НайтиСтроки(Новый Структура(""Свойство"", Свойство));
		Если МассивПоискаСтроки.Количество() > 0 Тогда
			
			Запись = МассивПоискаСтроки[0];
			Если Удалить = Истина Тогда
				ДопРеквизиты.Удалить(Запись);
			ИначеЕсли  ЗначениеЗаполнено(Свойство) И ЗначениеЗаполнено(Значение) Тогда 
				Запись.Значение = Значение;
			Иначе
				Возврат Ложь;
			КонецЕсли; 
			
		ИначеЕсли Удалить = Ложь Тогда
			Запись = ДопРеквизиты.Добавить();
			Запись.Свойство = Свойство;
			Запись.Значение = Значение;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Если Записывать = Истина Тогда
			Объект.РежимЗаписи.Загрузка = Истина;
			Объект.Записать();
			Объект.РежимЗаписи.Загрузка = Ложь;
		КонецЕсли; 
		
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Результат;
		
	
КонецФункции 

#КонецОбласти


Функция Объект1СВJSON(Объект1С, ФормироватьСПереносами = Истина)  Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	КонецЕсли; 
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Объект1С, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции 

Функция ОчисткаРеквизитовОбъекта(Объект1С, ИсключенияРеквизитов = Неопределено)  Экспорт
	
	Попытка
		
		//МассивИСключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключенияРеквизитов, "","",Истина, Истина)
		
		МетаданныеОбъекта =  Объект1С.Метаданные();
		Для каждого Реквизит  Из МетаданныеОбъекта.Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			//СтрПоиска = МассивИСключений.Найти(ИмяРеквизита);
			Если СтрНайти(ИсключенияРеквизитов, ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли; 
			
			Объект1С[ИмяРеквизита] = Неопределено;	
		КонецЦикла; 
		
		Для каждого ТабличнаяЧасть  Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Объект1С[ТабличнаяЧасть.Имя].Очистить();	
		КонецЦикла; 
		
		Объект1С.Записать();
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

Функция ОчисткаЗаписейРегистраСведений(ИмяРегистра, Измерения)   Экспорт
	
	Попытка
		
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
		Для каждого КлючЗначение Из Измерения Цикл
			Набор.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
			Набор.Записать();
		КонецЦикла; 
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


#Область  РаботаСФайлами  

// Сохранение во внешний файл .mxl, xls
//
// Параметры:
//  ТЗ  - ТаблицаЗначений - Таблица которую нужно записать. 
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
//
Функция СохранитьТЗ(ТЗ, ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипХранения = Неопределено Тогда 
			ТипХранения = ТипФайлаТабличногоДокумента.MXL;	
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;   
		Построитель = Новый ПостроительОтчета();
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		ТабДок.Записать(ПолныйПутьКФайлу, ТипХранения)		;
		Возврат Истина;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//Загрузка из .mxl, xls
//
// Параметры:   
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
//
Функция ПолучитьТЗ(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ТабДок = Новый ТабличныйДокумент;
		
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДок.Прочитать(ПолныйПутьКФайлу);
		
		ПЗ = Новый ПостроительЗапроса;    
		ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
		ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
		ПЗ.ЗаполнитьНастройки();
		ПЗ.Выполнить();
		
		Возврат ПЗ.Результат.Выгрузить();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции   

//Удаляет файл  .mxl, xls
//
// Параметры:
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
Функция УдалитьТЗ(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		УдалитьФайлы(ПолныйПутьКФайлу);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"" , ""xls"" и тд  
//По умолчанию ""mxl""
Функция ПолныйПутьКФайлу(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
		
	Если ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда
		Возврат  ПолныйПутьКФайлу;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда 
		ПутьККаталогу = ?(Прав(ПутьККаталогу, 1) = ""\"", ПутьККаталогу, ПутьККаталогу + ""\"");
		ПутьКФайлу = ПутьККаталогу + ИмяФайла;	
	Иначе // в каталог по умолчанию 
		//TODO:  Сделать регистр для хранения путей для разных пользователей  
		// тупенько 
		ИмяТекПользователя = Пользователи.ТекущийПользователь().Наименование;
		Если ИмяТекПользователя = ""Кириллов П.С."" Тогда
			Каталог = ""\\192.168.90.19\Temp_files\кпс\ЕРП\"";
		ИначеЕсли ИмяТекПользователя = ""Пустыльников М.В."" Тогда
			//Каталог = ""\\192.168.90.19\Temp_files\кпс\ЕРП\"";
			//...
			
		Иначе
			Возврат  Неопределено;
		КонецЕсли;
		
		ПутьКФайлу = Каталог + ИмяФайла;	
	
	КонецЕсли; 
	
	//Для других вариантов, например в exel	
	Если ЗначениеЗаполнено(ТипХранения) Тогда
		ПутьКФайлу = ПутьКФайлу + ""."" + Строка(ТипХранения);		
	Иначе //По умолчанию 
		ПутьКФайлу = ПутьКФайлу + "".mxl"";		
	КонецЕсли;
	
	Возврат  ПутьКФайлу;
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу) Экспорт
	ТекФайл = Новый Файл(ПутьКФайлу);	
	Возврат ТекФайл;
КонецФункции

Функция ПоказатьТаблицуОбъемовВидеоФайловНаСервере(МестоПапки = """") Экспорт 
	
	ОбъемВидеоРесурса = Новый ТаблицаЗначений;
	ОбъемВидеоРесурса.Колонки.Добавить(""Имя"", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОбъемВидеоРесурса.Колонки.Добавить(""Путь"",  ОбщегоНазначения.ОписаниеТипаСтрока(777));
	ОбъемВидеоРесурса.Колонки.Добавить(""Продолжительность"", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОбъемВидеоРесурса.Колонки.Добавить(""Минут"",  ОбщегоНазначения.ОписаниеТипаЧисло(15,3,ДопустимыйЗнак.Неотрицательный));
						
	//ОбъемВидеоРесурса.Очистить();
	
	Маски = Новый Массив;
	Маски.Добавить(""*.mp4"");
	Маски.Добавить(""*.avi"");   
	Маски.Добавить(""*.mkv"");   
	
	Для каждого Маска  Из Маски Цикл
		
		МассивФайловКаталога = НайтиФайлы(МестоПапки, Маска, Истина);
		
		Для каждого ЭлементМассива Из МассивФайловКаталога Цикл  
			ПолученныеСведения = ПолучитьСведенияОФайле(ЭлементМассива.ПолноеИмя, ""Продолжительность;Размер;Size;Дата;Имя;Дата изменения"");
			Нстр = ОбъемВидеоРесурса.Добавить();
			НСтр.Имя = ЭлементМассива.Имя; 
			НСтр.Путь = ЭлементМассива.Путь;
			НСтр.Продолжительность = ""01.01.0001 "" + ПолученныеСведения[""Продолжительность""]; 
			НСтр.Минут = Минута(НСтр.Продолжительность) + Секунда(НСтр.Продолжительность)/60; 
		КонецЦикла;
		
	КонецЦикла; 
	
	//Элементы.ОбъемВидеоРесурсаПродолжительность.ТекстПодвала = Окр(ОбъемВидеоРесурса.Итог(""Минут"")/60, 2);
	ОбъемВидеоРесурса.Сортировать(""Путь, Имя"");
	Возврат   ОбъемВидеоРесурса;
	
КонецФункции       

#Область ПолучитьДопСведенияОФайлах 

// Выделяет подстроку по разделителю
// В стандартных конфигурациях 1С имеется подобная функция, добавил сюда только для универсальности
Функция Выделить(Стр, Разд="";"")
    Поз = Найти(Стр, Разд);
    Если Поз = 0 Тогда
        Рез = Стр;
        Стр = """";
    Иначе
        Рез = Лев(Стр, Поз - 1);
        Стр = Сред(Стр, Поз + СтрДлина(Разд));
    КонецЕсли;
    Возврат Рез;
КонецФункции

// Удаляет из строки спецсимволы юникода и преобразует строку в число
Функция ЗначениеВЧисло(Знач Зн)
    Пока Зн <> """" Цикл
        Если Найти(""0123456789"", Лев(Зн, 1)) = 0 Тогда
            Зн = Сред(Зн, 2);
        ИначеЕсли Найти(""0123456789"", Прав(Зн, 1)) = 0 Тогда
            Зн = Лев(Зн, СтрДлина(Зн) - 1);
        Иначе
            Прервать;
        КонецЕсли;
    КонецЦикла;
    Возврат ?(Зн="""", 0, Число(Зн));
КонецФункции

//TODO:  Раскомментировать в модуле внешней обработки 
//Пример:
//D:\1С Труд\ERP\! Внешние\В_Отчеты\gs_erp_Отч_29_ЭлектронныйАдресРасчетныхЛистков.erf..gs_erp_Отч_29_ЭлектронныйАдресРасчетныхЛистков.МодульОбъекта

//Перем СписокСвойствФайла, WshShell, objShellApp; // Храним для сокращения времени обработки нескольких файлов подряд

// Возвращает объект Соответствие со списком всех ненулевых свойств файла или Неопределено - если свойства определить не получилось
// СписокСвойств - может содержать список необходимых свойств, разделенных точкой с запятой "";""
// Если указано всего одно свойство, то будет возвращено полученное значение, а не список значений!
// Например: ПолучитьСведенияОФайле(""c:\windows\notepad.exe"", ""Версия продукта"");
Функция ПолучитьСведенияОФайле(ПутьДоФайла, Знач СписокСвойств = Неопределено)
//	
//	Файл = Новый Файл(ПутьДоФайла);
//    Если Файл.Существует() Тогда
//        Если WshShell = Неопределено Тогда
//            WshShell              = Новый COMОбъект(""WScript.Shell"");
//            objShellApp            = Новый COMОбъект(""Shell.Application"");
//        КонецЕсли;
//        objFolder                = objShellApp.NameSpace(Файл.Путь);
//        objItem                    =    objFolder.ParseName(Файл.Имя); 
//        Рез                        = Новый Соответствие;
//        Если СписокСвойствФайла = Неопределено Тогда
//            СписокСвойствФайла    = Новый Соответствие;
//            Для К=0 По 300 Цикл
//                ИмяСвойства        = СокрЛП(objFolder.GetDetailsOf(NULL, К));
//                Если ИмяСвойства <> """" Тогда
//                    СписокСвойствФайла.Вставить(ИмяСвойства, К);
//                    Если СписокСвойств = Неопределено Тогда
//                        Значение = objFolder.GetDetailsOf(objItem,К);
//                        Если Значение <> """" Тогда
//                            Рез.Вставить(ИмяСвойства, Значение);
//                        КонецЕсли;
//                    КонецЕсли;
//                КонецЕсли;
//            КонецЦикла;
//            Если СписокСвойств = Неопределено Тогда
//                Возврат Рез;
//            КонецЕсли;
//        КонецЕсли;
//        Если СписокСвойств = Неопределено Тогда
//            Для Каждого Эл Из СписокСвойствФайла Цикл
//                Значение = objFolder.GetDetailsOf(objItem, Эл.Значение);
//                Если Значение <> """" Тогда
//                    Рез.Вставить(Эл.Ключ, Значение);
//                КонецЕсли;
//            КонецЦикла;
//        Иначе
//            Пока СписокСвойств<>"""" Цикл
//                Имя = Выделить(СписокСвойств);
//                Поз    = СписокСвойствФайла.Получить(Имя);
//                Значение = ?(Поз = Неопределено, Неопределено, objFolder.GetDetailsOf(objItem, Поз));
//                Если СписокСвойств = """" И Рез.Количество() = 0 Тогда
//                    Возврат Значение;
//                КонецЕсли;
//                Рез.Вставить(Имя, Значение);
//            КонецЦикла;
//        КонецЕсли;
//        Возврат ?(Рез.Количество()=0, Неопределено, Рез);
//    КонецЕсли;
    Возврат Неопределено;
КонецФункции

// В качестве примера, получение размеров изображения
Функция ПолучитьРазмерыИзображения(ПутьДоФайла)
    Рез = Новый Структура(""Высота,Ширина"", 0, 0);
    Зн = ПолучитьСведенияОФайле(ПутьДоФайла, ""Размеры"");
    Если Зн <> Неопределено Тогда
        Рез.Ширина = ЗначениеВЧисло(СокрЛП(Выделить(Зн, ""x"")));
        Рез.Высота = ЗначениеВЧисло(СокрЛП(Зн));
    КонецЕсли;
    Возврат Рез;
КонецФункции	

#КонецОбласти 

#КонецОбласти


#Область  ФоновоеВыполнение

Функция ЗапуститьФоновоеВыполнение(ТекстПроцедуры, СтруктураПараметров = Неопределено) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТекстПроцедуры);
	ПараметрыВыполнения.Добавить(СтруктураПараметров);
	
	ФоновыеЗадания.Выполнить(""пр_Общий.ФоноваяПроцедура"", ПараметрыВыполнения, УникальныйИдентификатор);
	Возврат УникальныйИдентификатор;
	
КонецФункции

Процедура ФоноваяПроцедура(ТекстМодуля, ПараметрыВыполнения) Экспорт
	
	ПолныйТекстМодуля = """";
	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
		ПолныйТекстМодуля = ПолныйТекстМодуля + ТекПараметр.Ключ + ""=ПараметрыВыполнения."" + ТекПараметр.Ключ + "";"" + Символы.ПС;
	КонецЦикла;
	ПолныйТекстМодуля = ПолныйТекстМодуля + ТекстМодуля;
	
	Выполнить(ПолныйТекстМодуля);
	
КонецПроцедуры

#КонецОбласти

Функция ЗаполнитьДанныеФормыДляОбновления(Форма, МассивЗапоминаемыхОбъектов)  Экспорт
	
	 //""\\pivo.local\Resource\Личные\Кириллов ПС\r\Petrushka api\process\ExternUniversalProcessPetrushka.epf""	Строка
	ВнОбработакаОбъект = Форма.РеквизитФормыВЗначение(""Объект"");
	ПутьКВнешнейОбработке = ВнОбработакаОбъект.ИспользуемоеИмяФайла;			
	ИмяОбработки = ВнОбработакаОбъект.Метаданные().Имя;
	
	СтруктураДанных = Новый Структура();
	Если МассивЗапоминаемыхОбъектов.Количество() > 0 Тогда
		Для каждого Эл Из МассивЗапоминаемыхОбъектов Цикл
			//Дерево = РеквизитФормыВЗначение(""КаталогиАпи"");
			//СтруктураДанных = Новый Структура(""КаталогиАпи"", Дерево);
			//ДанныеФормы = ЗначениеВСтрокуВнутр(СтруктураДанных);
			СтруктураДанных.Вставить(Эл.Имя,  Форма.РеквизитФормыВЗначение(Эл.Имя)); 
		КонецЦикла; 
		
	Иначе
		ДанныеФормы = Неопределено;
	КонецЕсли; 
	
	ДанныеФормы = ЗначениеВСтрокуВнутр(СтруктураДанных);
	
	ПараметрыОткрытия = Новый Структура(""ПолныйПуть, ИмяОбработки, ДанныеФормы"", ПутьКВнешнейОбработке, ИмяОбработки, ДанныеФормы);
	
	ПолныйПуть = ""\\pivo.local\Resource\Личные\Кириллов ПС\ОбновляторФорм.epf"";
	пр_Общий.СоздатьВнешнююОбработкуПоПути(ПолныйПуть);
	
	Возврат  ПараметрыОткрытия;
	
КонецФункции 

	
#Область  РаботаСДатами

Функция ДатаПоТекущейНедели(НаДеньНедели, ТекДатаНедели = Неопределено)  Экспорт
		
	Если ТекДатаНедели = Неопределено Тогда
		ТекДатаНедели = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекНачалоНедели = НачалоНедели(ТекДатаНедели);
	ИндексДатыНедели = Перечисления.ДниНедели.Индекс(НаДеньНедели) + 1;
	
	ДеньНаДеньНедели = ТекНачалоНедели + ИндексДатыНедели * 84600;
	
	Если ДеньНаДеньНедели < ТекДатаНедели Тогда
		ДеньНаДеньНедели = ДеньНаДеньНедели + 86400 * 7;
	КонецЕсли; 
	
	Возврат ДеньНаДеньНедели; 
	
КонецФункции 

Функция ПеречислениеДеньНеделиПоДате(ТекДата)  Экспорт
	
	ДеньНедели = ДеньНедели(ТекДата) - 1;
	ПеречислениеДеньНеделиПоДате = Перечисления.ДниНедели.Получить(ДеньНедели);
	
	Возврат ПеречислениеДеньНеделиПоДате; 
	
КонецФункции 

Функция ДеньНеделиЗаказаБольшеДоставки(ДеньНеделиЗаказа, ДеньНеделиДоставки)  Экспорт
	
	Возврат Перечисления.ДниНедели.Индекс(ДеньНеделиЗаказа) > Перечисления.ДниНедели.Индекс(ДеньНеделиДоставки);
	
КонецФункции 

#КонецОбласти
"}
},
{0,
{"РазработкаСервер",0,0,"","
#Область ПрограммныйИнтерфейс

Процедура СоздатьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь)  Экспорт
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	
КонецПроцедуры

Функция ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь)  Экспорт
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	Возврат  ВнешняяОбработка;
	
КонецФункции

Функция ВыполнитьМетодВнешнейОбработкиПоПути(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = ""ВнОбработка."" + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, ""ytaptest6"");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

//СтрокаСоединенияИнформационнойБазы()	= ""Srvr=""at-sql5"";Ref=""ytaptest6"";
// ИмяИБ = ""ytaptest6""
Функция ПолучитьИмяИнформационнойБазы()  Экспорт
	
	СтрСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	НачалоИмениИБ = СтрНайти(СтрокаСоединенияИнформационнойБазы(),""Ref="");
	
	ИмяИБ = Сред(СтрСоединенияИБ, НачалоИмениИБ + 4,СтрДлина(СтрСоединенияИБ) - НачалоИмениИБ - 4);
	
	Возврат  ИмяИБ;

КонецФункции // ()


//Подключение обработки или отчета БСП
//Пример открытие формы внешней обрабки подключенной чх БСП
// ПараметрыФормы.Вставить(""аян_ПричинаКорректировки"", Объект.ПричинаКорректировки);
// Установка параметра в форме
// аян_Разработка.ПодключитьВнешнююОбработкуБСП(""Ввод расхождений по результатам приемки получателем"");
// ОткрытьФорму(""ВнешняяОбработка.ВводРасхожденийПоРезультатамПриемкиПолучателем.Форма"", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор); 
Процедура ПодключитьВнешнююОбработкуБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяДопОбработки);
	ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОбработкаСсылка);
КонецПроцедуры

//Получение обработки или отчета БСП
Функция ВнешняяОбработкаБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяДопОбработки);
	ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ДопОбработкаСсылка);
	Возврат  ВнешняяОбработка;
КонецФункции

// Возвращает Информацию о задаче разработки
//	для динамического управления выполнения кода, отключения/включения задачи
//
// Параметры:
// НомерЗадачи - номер задачи по трекеру заач - Например : ""2021_059""
//					Полный номер задачи: ayan#2021_059#УТАП 
//					ayan - проект задачи
//					2021 - Год создания, назначения задачи
//                  059  - Порядковый номер
//                  УТАП - Конфигурация - место разработки
//  ТекущийПользователь  - СправочникСсылка - Пользователи ИБ
//
// Возвращаемое значение: СтруктураСведенийОЗадаче:
//   Структура, Неопределено  - СтруктураСКлючами: (""Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке"")
Функция ИнформациОЗадаче(НомерЗадачи, ТекущийПользователь)   Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	аян_СписокЗадачРазработки.Задача.Ссылка КАК Задача,
		|	аян_СписокЗадачРазработки.Отключена КАК Отключена,
		|	аян_СписокЗадачРазработки.РежимОтладки КАК РежимОтладки,
		|	аян_СписокЗадачРазработки.Задача.ВедущийРазработчик = &ТекущийПользователь КАК ЭтоВедущийРазработчик,
		|	ЕСТЬNULL(аян_ЗадачиРазработкиТестировщики.Тестировщик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоТестировщик,
		|	ЕСТЬNULL(аян_ЗадачиРазработкиРазработчики.Разработчик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоРазработчик,
		|	аян_СписокЗадачРазработки.Задача.Контролер = &ТекущийПользователь КАК ЭтоКонтролер
		|ПОМЕСТИТЬ ВТ_ДанныеОЗадаче
		|ИЗ
		|	РегистрСведений.аян_СписокЗадачРазработки КАК аян_СписокЗадачРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.аян_ЗадачиРазработки.Тестировщики КАК аян_ЗадачиРазработкиТестировщики
		|		ПО (аян_ЗадачиРазработкиТестировщики.Ссылка = аян_СписокЗадачРазработки.Задача)
		|			И (аян_ЗадачиРазработкиТестировщики.Тестировщик = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.аян_ЗадачиРазработки.Разработчики КАК аян_ЗадачиРазработкиРазработчики
		|		ПО аян_СписокЗадачРазработки.Задача = аян_ЗадачиРазработкиРазработчики.Ссылка
		|			И (аян_ЗадачиРазработкиРазработчики.Разработчик = &ТекущийПользователь)
		|ГДЕ
		|	аян_СписокЗадачРазработки.Задача.Код = &Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеОЗадаче.Задача КАК Задача,
		|	ВТ_ДанныеОЗадаче.Отключена КАК Отключена,
		|	ВТ_ДанныеОЗадаче.РежимОтладки КАК РежимОтладки,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик КАК ЭтоВедущийРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоТестировщик КАК ЭтоТестировщик,
		|	ВТ_ДанныеОЗадаче.ЭтоРазработчик КАК ЭтоРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЭтоКонтролер,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоТестировщик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЕстьДоступКОтладке
		|ИЗ
		|	ВТ_ДанныеОЗадаче КАК ВТ_ДанныеОЗадаче"";
	
	Запрос.УстановитьПараметр(""Код"", НомерЗадачи);
	Запрос.УстановитьПараметр(""ТекущийПользователь"", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	СтруктураСведенийОЗадаче = Новый Структура(""Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке"");
	
	Если  ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСведенийОЗадаче, ВДЗ); 
	КонецЕсли; 
	
	Возврат   СтруктураСведенийОЗадаче;
	
КонецФункции

Функция ВыполнитьМетодФункцииПоИмени(ИмяМетода, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 
	
	Перем Результат;
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	
	Выполнить(""Р = "" + ИмяМетодаСПараметрами);
	
	Возврат Результат;
	
КонецФункции

Функция МетодСПараметрамиПоИмени(ИмяМетода)
	
	НачальныйНомерСтрокиПараметров = СтрНайти(ИмяМетода, ""("");
	
	ИмяМетодаСПараметрами = Лев(ИмяМетода, НачальныйНомерСтрокиПараметров);
	ТекстПараметров = Сред(ИмяМетода,НачальныйНомерСтрокиПараметров, СтрДлина(ИмяМетода) - НачальныйНомерСтрокиПараметров - 1);
	МассивПараметров = СтрРазделить(ТекстПараметров, "","");
	
	Для НомерПараметра = 0 По МассивПараметров.ВГраница() Цикл
		ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + ""П"" + НомерПараметра + "","";		
	КонецЦикла; 
	
	ИмяМетодаСПараметрами = Лев(ИмяМетодаСПараметрами, СтрДлина(ИмяМетодаСПараметрами) - 1) + "")"";
	
	Возврат  ИмяМетодаСПараметрами;

КонецФункции 

Функция  ВыполнитьМетодОткрытойОбработки(ОбъектОбработки, ИмяМетода)  Экспорт
	ОбъектОбработка = ДанныеФормыВЗначение(ОбъектОбработки, Тип(""ДанныеФормыСтруктура""));
	Результат = ВыполнитьМетодФункцииПоИмени(""ОбъектОбработка."" + ИмяМетода);
	Возврат  Результат;
КонецФункции

#КонецОбласти

Функция ПолучитьАдресаПользователя (текущийПользователь) Экспорт
	
	масРезультат = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	терехинАдресаПользователей.IPАдрес
		|ИЗ
		|	РегистрСведений.терехинАдресаПользователей КАК терехинАдресаПользователей
		|ГДЕ
		|	терехинАдресаПользователей.Пользователь = &Пользователь"";
	
	Запрос.УстановитьПараметр(""Пользователь"", текущийПользователь);
	
	масРезультат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Если масРезультат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат масРезультат;
	КонецЕсли;
	
КонецФункции


#Область  РаботыССылками

Функция СсылкаПоGUID(МенеджерТипа, УникальныйИдентификаторСтрокой)     Экспорт
	
	Попытка
		Если УникальныйИдентификаторСтрокой = """" Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		
		СсылкаНаОбъект1С = МенеджерТипа.ПолучитьСсылку(УникальныйИдентификатор);
		
		Если СтрНайти(СсылкаНаОбъект1С, ""Объект не найден"") > 0 Тогда
			Возврат Неопределено;	
		Иначе
			Возврат СсылкаНаОбъект1С;	
		КонецЕсли; 
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти"}
},
{0,
{"РазработкаКлиентСервер",0,0,"","
//Возвращает уникальный путь с привязкой во времени
//
// Параметры:
//  <ПутьККаталогу>  - Строка - Путь к папке
//                 Пример: \\pivo.local\Resource\Личные\Кириллов ПС
//  <ИмяФайла>  - Строка - имя файла
//                 Пример: ""ТестовыеДанные""
//  <ПериодХраненияФайла>  - Строка - Год, Месяц, День, Час, Минута, Секунда
//	по умолчанию ""Год""
//	<РасширениеФайла>  - Строка - привер: "".json""
//  <ФорматПериодаХраненияФайла>  - Строка - чз Конструктор форматной строки
//
//пример ПутьККаталогу = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТ Меркурий\ayan#2021_034#УТ Меркурий Не передаются новые Нмоенклатуры  Кириллов П.С.\ТестовыеДанные  2021_05_11 10_31.json"";
Функция ВернутьПолныйПутьКфайлуПоДате(ПутьККаталогу, ИмяФайла = """", РасширениеФайла = ""json"", ПериодХраненияФайла = ""Год"", ФорматПериодаХраненияФайла = """" )   Экспорт
	
	ПроверитьСоздатьКаталог(ПутьККаталогу);
	ФорматСохраненияФайла = """";
	
	Если РасширениеФайла = Неопределено Тогда
		РасширениеФайла = ""json"";
	КонецЕсли; 
	
	Если  ФорматПериодаХраненияФайла = """" Тогда
		ФорматСохраненияФайла = ""ДФ='"";
		Если  ПериодХраненияФайла = ""Год"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy"";		
		ИначеЕсли   ПериодХраненияФайла = ""Месяц"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy.MM"";
		ИначеЕсли   ПериодХраненияФайла = ""День"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy.MM.dd"";		
		ИначеЕсли   ПериодХраненияФайла = ""Час"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy.MM.dd hh"";
		ИначеЕсли   ПериодХраненияФайла = ""Минута"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy.MM.dd hh.mm"";
		ИначеЕсли   ПериодХраненияФайла = ""Секунда"" Тогда
			ФорматСохраненияФайла = ФорматСохраненияФайла + ""yyyy.MM.dd hh.mm.ss"";
		Иначе
			ФорматСохраненияФайла = """";
		КонецЕсли; 
		
		ФорматСохраненияФайла = ?(ФорматСохраненияФайла = """", """", ФорматСохраненияФайла + ""'"");
	Иначе
		ФорматСохраненияФайла = ФорматПериодаХраненияФайла;	
	КонецЕсли; 
	
	ДатаОтправки = """";
	Если ФорматСохраненияФайла <> """" Тогда
		ДатаОтправки = Формат(ТекущаяДата(), ФорматСохраненияФайла);
		ДатаОтправки = СтрЗаменить(ДатаОтправки, ""."", ""_"");
		ДатаОтправки = "" "" + ДатаОтправки;
	КонецЕсли; 
	
	ПолныйПуть = ПутьККаталогу + ""\"" + ИмяФайла + ДатаОтправки + ""."" + РасширениеФайла;
	Возврат   ПолныйПуть;
	
КонецФункции 

Процедура ПроверитьСоздатьКаталог(ПутьККаталогу) Экспорт
	КаталогНаДиске = Новый Файл(ПутьККаталогу);
	Если НЕ КаталогНаДиске.Существует() Тогда	
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"ОбработкаОтладки",0,0,"обро","ОбработкаОтладки = аян_ОбщийСерверПовтИсп.ОбработкаОтладки(""аян_ОбменДанными"");
Если ОбработкаОтладки <> Неопределено Тогда
	ОбработкаОтладки.ОбменДаннымиУТ_УТАП_ПроверитьЗарегистрироватьИзменения(Источник, Отказ, РежимЗаписи, РежимПроведения);
	Возврат;
КонецЕсли; 
"}
},
{0,
{"ИсполняемыйМодуль",0,0,"мод","пр_Модуль = пр_Общий.ИсполняемыйМодуль(""аян_ОбменУниверсальный"", пр_НастройкиПовтИсп.ТекущийПользователь()); 
Если пр_Модуль <> Неопределено Тогда
	Возврат пр_Модуль.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
КонецЕсли; 

пр_Модуль = пр_Общий.ИсполняемыйМодуль(""ПетрушкаСервер"", пр_НастройкиПовтИсп.ТекущийПользователь()); 
Если пр_Модуль = Неопределено Тогда
	пр_Модуль = ПетрушкаСервер;
КонецЕсли; 
пр_Модуль.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);

пр_Модуль = пр_Общий.ИсполняемыйМодульКаталога(КаталогМодуля + ""\Модули\"", ""пр_Клиент"", пр_НастройкиПовтИсп.ТекущийПользователь()); 
Если пр_Модуль <> Неопределено Тогда
	Возврат пр_Модуль.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
КонецЕсли; 

"}
},
{0,
{"ИсполняемыйМодульФормы",0,0,"модф","пр_Форма = пр_Клиент.ИсполняемыйМодуль(""Сбис_ФормаПросмотрДокумента"", ""СопоставлениеНоменклатуры_СуммовойУчет"", пр_НастройкиПовтИсп.ТекущийПользователь()); 
Если пр_Форма <> Неопределено Тогда
	пр_Форма.НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(СтрокиПоиска, Ини.Конфигурация); 
КонецЕсли; 

пр_Форма = ИсполняемыйМодульКаталогаКлиент(КаталогМодуля + ""\Модули\"", ""пр_Клиент"", , , , пр_НастройкиПовтИсп.ТекущийПользователь()); 
Если пр_Форма <> Неопределено Тогда
	пр_Форма.ОткрытьПриложение(КаталогОбмена, СтандартнаяОбработка);
КонецЕсли; 

"}
},
{0,
{"ИсполняемыйКодИСпользовать",0,0,"испки","пр_ИспользоватьКод = пр_НастройкиПовтИсп.ИсполнятьКод(""ЧекККМ_ФормаДокументаРМК"", ""аян_ПриОткрытииПосле_ИспользоватьПодключаемоеОборудование"", пр_НастройкиПовтИсп.ТекущийПользователь());
Если пр_ИспользоватьКод = Истина Тогда
	<?>  
КонецЕсли;"}
},
{0,
{"ИсполняемыйКодОтключить",0,0,"испко","пр_ОтключитьКод = пр_НастройкиПовтИсп.ИсполнятьКод(""ЧекККМ_ФормаДокументаРМК"", ""аян_ПриОткрытииПосле_ИспользоватьПодключаемоеОборудование"", пр_НастройкиПовтИсп.ТекущийПользователь());
Если пр_ОтключитьКод = Истина Тогда
	<?>  
КонецЕсли;"}
},
{0,
{"СборЛога",0,0,"лог","пр_Ошибка = ОписаниеОшибки();
пр_Результат = пр_Общий.РезультатЗаписиВЛог(""<?""Модуль_ИмяМетода"">"", Объект1С, пр_Ошибка, ТипСсылки, Ссылка, ВходящиеДанные, Пользователь, ПериодЗаписи);


 

"}
},
{0,
{"СборЛогаВтелеграм",0,0,"логт","пр_Ошибка = ОписаниеОшибки();
пр_Общий.ОтправитьСообщениеВТелеграмDev(""<?""ИмяМетода"">"", Объект.Ссылка, пр_Ошибка);
 

"}
},
{0,
{"СборЛогаПетрушка",0,0,"логпмп","пр_Ошибка = ОписаниеОшибки();
ОтправитьСообщениеВТелеграммПетрушка(""<?""ИмяМетода"">"", Объект1С, пр_Ошибка, ТелоЗапроса, Версия, Истина);


 

"}
}
},
{3,
{"ЗаписьДанных",1,0,"",""},
{0,
{"ЗаписьДокументов",0,0,"","	
	РезультатЗаписи = Неопределено;
	ТекстОшибки = """";
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		РезультатЗаписи = ДокументОбъект.Ссылка;
	Исключение
		ТекстОшибки = ""Ошибка проведения документа: "" + ОписаниеОшибки();
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки)  Тогда
		
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;	
			ДокументОбъект.Записать();	
			РезультатЗаписи = ДокументОбъект.Ссылка;
		Исключение
			ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		КонецПопытки; 
		
		Если НЕ Программно Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить(); 
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если Программно Тогда
		СтруктураДанных = Новый Структура(""ДокСсылка, ТекстОшибки"", РезультатЗаписи, ТекстОшибки);
		Возврат  СтруктураДанных;
	Иначе
		Возврат  ДокументОбъект.Ссылка;
	КонецЕсли; 
"}
},
{0,
{"НачатьТранзакцию",0,0,"НачТран","НачатьТранзакцию();
Попытка
	
	Набор.Записать();
	ЗафиксироватьТранзакцию();
Исключение
	ОтменитьТранзакцию();
КонецПопытки;
"}
},
{0,
{"ОграничениеТранзакции",0,0,"транз","РезультатЗапроса = Запрос.Выполнить();

Если РезультатЗапроса.Пустой() Тогда
	Возврат;
КонецЕсли; 

Если РежимОтладки = Истина Тогда
	Возврат;	
КонецЕсли; 

ВДЗ = РезультатЗапроса.Выбрать();

//Ограничение транзакции 
ПрерватьЦикл = Ложь; 
ОбъемТранзакции = 500;

ТекТранз = ОбъемТранзакции;
Осч = 1;
Сч = 1;

НачатьТранзакцию();

Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
	
	Попытка
		
		//Обработка данных
		Док = ВДЗ.СсылкаДубль.ПолучитьОбъект();
		Док.ИдентификаторЗаписи = ВДЗ.ИдентификаторЗаписи;
		Док.ЭтоДубль = Истина;
		Док.Оригинал = ВДЗ.ДокументОснование;
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	Если Сч >= ТекТранз ИЛИ Осч = ВДЗ.Количество() Тогда //Последняя запись
		//Зафиксировать транзакцию
		ЗафиксироватьТранзакцию();
		
		Если Осч <> ВДЗ.Количество() Тогда //Если запись не последняя продолжаем
			ТекТранз = ОбъемТранзакции;
			Сч = 1;
			НачатьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;

	Сч = Сч + 1;
	Осч = Осч + 1;
	
КонецЦикла;
"}
}
}
},
{1,
{"СКД",1,0,"",""},
{0,
{"ВыводНужногоУровняГруппировки",0,0,"","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
    Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
    ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);
	
КонецПроцедуры
"}
}
},
{5,
{"Внешние отчеты обработки",1,0,"",""},
{0,
{"Модуль Внешнего отчета просто",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();

	
	//<?""Полный текст задачи"">
	ПараметрыРегистрации.Версия = ""<?""Дата отчета"">"";
	НаименованиеОтчета = ЭтотОбъект.Метаданные().Синоним;
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Наименование = НаименованиеОтчета; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Информация = ""кпс_""; 
	
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОтчета;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ""ОткрытиеФормы"";
	//СтрТаблицы.ПоказыватьОповещение = Истина;

	  //ПараметрыРегистрации.РассылкаОтчетов = Истина; 
	
 	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
    Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
    ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);
	
КонецПроцедуры

#КонецЕсли
"}
},
{0,
{"Модуль внешней обработки",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	//<?""Полный текст задачи"">
	ПараметрыРегистрации.Версия = ""<?""Дата отчета"">"";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОбработки; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Назначение.Добавить(""Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента"");
	
	//ПараметрыРегистрации.Информация = ""кпс_""; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОбработки;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ""ОткрытиеФормы"";
	//СтрТаблицы.ПоказыватьОповещение = Истина;
	СтрТаблицы.Модификатор = ""ПечатьMXL"";
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецЕсли
"}
},
{0,
{"Модуль внешнего отчета",0,1,"вотч","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();

	//<?""Полный текст задачи"">
	ПараметрыРегистрации.Версия = ""<?""Дата отчета"">"";
	НаименованиеОтчета = ЭтотОбъект.Метаданные().Синоним;
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Наименование = НаименованиеОтчета; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Информация = ""кпс_""; 
	
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОтчета;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ""ОткрытиеФормы"";
	//СтрТаблицы.ПоказыватьОповещение = Истина;

	  //ПараметрыРегистрации.РассылкаОтчетов = Истина; 
	
 	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецЕсли"}
},
{0,
{"Модуль внешнего отчета внешн источник",0,1,"вотч_","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();

	
	//ayan#2021_0027#УТАП v.11.1.10.204 Управленческий отчет взаиморасчеты с директором Егоровым Д.Ю Кириллов П.С.  2021.04.27
	ПараметрыРегистрации.Версия = ""2021-04-27"";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОтчета = <?""Наимнование отчета"">;
	
	ПараметрыРегистрации.Наименование = НаименованиеОтчета; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Информация = ""кпс_""; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОтчета;
	СтрТаблицы.Идентификатор = <?""Идентификатор отчета"">;
	СтрТаблицы.Использование = ""ОткрытиеФормы"";
	//СтрТаблицы.ПоказыватьОповещение = Истина;

	  //ПараметрыРегистрации.РассылкаОтчетов = Истина; 
	
 	Возврат ПараметрыРегистрации;
	
КонецФункции

//Вар1
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДиректорЕгоров = КонтрагентДиректорЕгоровФизЛицо();
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(""00-000195"");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
    
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""Егоров"", ДиректорЕгоров);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""СтатьяДвиженияДенежныхСредств"", СтатьяДДС);
    
    КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

//Вар2
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)		
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрыДанныхПользовательские = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
    НачалоПериода = Неопределено;
	КонецПериода = Неопределено;
	
	ПарамСКД = НастройкиСКД.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных(""Администратор""))
	ПарамСКД.Значение = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(""c55dfead-ad3e-11e5-80c5-00155d000c03""));
	ПарамСКД.Использование = Истина;
	
	Для Каждого Элемент Из ПараметрыДанныхПользовательские Цикл 
		Если ТипЗнч(Элемент) <> Тип(""ЗначениеПараметраНастроекКомпоновкиДанных"") Тогда 
			Продолжить; 
		КонецЕсли;
		Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""Период"") Тогда
			НачалоПериода = Элемент.Значение.ДатаНачала;
			КонецПериода = Элемент.Значение.ДатаОкончания;
			ПараметрыВПользовательскихНастройках = Истина;
		КонецЕсли;
		
		Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""МассивПапокДопНоменклатуры"") Тогда
			МассивПапокДопНоменклатуры = Элемент.Значение;
		КонецЕсли;
		
		Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""МассивДопНоменклатуры"") Тогда
			МассивДопНоменклатуры = Элемент.Значение;
		КонецЕсли;
		
	КонецЦикла;	     
	
	Если НЕ ПараметрыВПользовательскихНастройках Тогда 
		Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл 
			Если ТипЗнч(Элемент) <> Тип(""ЗначениеПараметраНастроекКомпоновкиДанных"") Тогда 
				Продолжить; 
			КонецЕсли;
			Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""Период"") Тогда
				НачалоПериода = Элемент.Значение.ДатаНачала;
				КонецПериода = Элемент.Значение.ДатаОкончания;
			КонецЕсли;
			
            Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""МассивПапокДопНоменклатуры"") Тогда
                МассивПапокДопНоменклатуры = Элемент.Значение;
			КонецЕсли;
			
            Если Элемент.Параметр = Новый ПараметрКомпоновкиДанных(""МассивДопНоменклатуры"") Тогда
                МассивДопНоменклатуры = Элемент.Значение;
			КонецЕсли;
			
		КонецЦикла;    
	КонецЕсли;
	
	Если НачалоПериода = Неопределено И КонецПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтчета = ПодготовитьВнешниеНаборыДанных(НачалоПериода, КонецПериода, МассивПапокДопНоменклатуры, МассивДопНоменклатуры);
	ВнешниеНаборыДанных = Новый Структура(""ДанныеОтчета"", ДанныеОтчета);
	
	СхемаКомпоновкиДанных = ПолучитьМакет(""МакетВнешнСоединение"");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	
КонецПроцедуры

Функция ПодготовитьВнешниеНаборыДанных(НачалоПериода, КонецПериода, МассивПапокДопНоменклатуры, МассивДопНоменклатуры)
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка,
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НоменклатураРеализаций
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
		|	И РеализацияТоваровУслугТовары.Ссылка.Партнер.Родитель.Наименование = """"Почта России филиал УФПС Томской области""""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикиНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкиНоменклатуры
		|ПОМЕСТИТЬ ВТ_ДопНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Родитель В (&МассивПапокДопНоменклатуры)
		|			ИЛИ Номенклатура.Ссылка В (&МассивДопНоменклатуры))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НоменклатураРеализаций.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураРеализаций.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураРеализаций.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТ_ОтборНоменклатуры
		|ИЗ
		|	ВТ_НоменклатураРеализаций КАК ВТ_НоменклатураРеализаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДопНоменклатура.Номенклатура,
		|	ВТ_ДопНоменклатура.ХарактеристикиНоменклатуры,
		|	ВТ_ДопНоменклатура.УпаковкиНоменклатуры
		|ИЗ
		|	ВТ_ДопНоменклатура КАК ВТ_ДопНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТ_ОтборНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
		|	ВТ_ОтборНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ВТ_ОтборНоменклатуры.Номенклатура.Производитель КАК Производитель,
		|	ВТ_ОтборНоменклатуры.Характеристика КАК Характеристика,
		|	ВТ_ОтборНоменклатуры.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """""""") КАК ШтрихКод,
		|	ВТ_ОтборНоменклатуры.Номенклатура.Вес КАК Вес,
		|	ВТ_ОтборНоменклатуры.Номенклатура.ВесБрутто КАК ВесБрутто
		|ПОМЕСТИТЬ ВТ_ДанныеУтап_
		|ИЗ
		|	ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ВТ_ОтборНоменклатуры.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ВТ_ОтборНоменклатуры.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ВТ_ОтборНоменклатуры.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Цены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(ВидЦены, Номенклатура) В
		|				(ВЫБРАТЬ
		|					&ВидЦены КАК ВидЦены,
		|					ВТ_ДанныеУтап.Номенклатура КАК Номенклатура
		|				ИЗ
		|					ВТ_ДанныеУтап_ КАК ВТ_ДанныеУтап)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеУтап.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеУтап.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУтап.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ВТ_ДанныеУтап.Производитель КАК Производитель,
		|	ВТ_ДанныеУтап.Характеристика КАК Характеристика,
		|	ВТ_ДанныеУтап.Упаковка КАК Упаковка,
		|	ВТ_ДанныеУтап.ШтрихКод КАК ШтрихКод,
		|	ВТ_ДанныеУтап.Вес КАК ВесБрутто,
		|	ВТ_ДанныеУтап.ВесБрутто КАК Вес,
		|	ЕСТЬNULL(ВТ_Цены.Цена, 0) КАК Цена,
		|	ВТ_ДанныеУтап.Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУтап.Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование
		|ПОМЕСТИТЬ ВТ_ДанныеУтап
		|ИЗ
		|	ВТ_ДанныеУтап_ КАК ВТ_ДанныеУтап
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
		|		ПО ВТ_ДанныеУтап.Номенклатура = ВТ_Цены.Номенклатура
		|			И ВТ_ДанныеУтап.Характеристика = ВТ_Цены.Характеристика
		|			И ВТ_ДанныеУтап.Упаковка = ВТ_Цены.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДанныеУтап.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование
		|ПОМЕСТИТЬ ВТ_ЗапросВМеркурий
		|ИЗ
		|	ВТ_ДанныеУтап КАК ВТ_ДанныеУтап"";
	
	Запрос.УстановитьПараметр(""КонецПериода"", КонецПериода);
	Запрос.УстановитьПараметр(""НачалоПериода"", НачалоПериода);
	Запрос.УстановитьПараметр(""МассивДопНоменклатуры"", МассивДопНоменклатуры);
	Запрос.УстановитьПараметр(""МассивПапокДопНоменклатуры"", МассивПапокДопНоменклатуры);
	Запрос.УстановитьПараметр(""ВидЦены"", Справочники.ВидыЦен.НайтиПоНаименованию(""Розничная"", Истина));
	
	Запрос.Выполнить();
	
	ПромежуточныыеДанные = ЗаполнитьСведениямиПТОНаСервере(МВТ);
	
	Если  ПромежуточныыеДанные = Неопределено Тогда
		//передадим данные без данных УТ.Меркурий,  МеркурийКодТНВЭД = """"
		ПромежуточныыеДанные = МВТ.Таблицы.Найти(""ВТ_ДанныеУтап"").ПолучитьДанные().Выгрузить(); 
	КонецЕсли;
		
	МВТ.Закрыть();
	
	Возврат ПромежуточныыеДанные;
	
КонецФункции // ПодготовитьВнешниеНаборыДанных()

//Внешнее соединение с УТ.Меркурий для получения данных по полю МеркурийКодТНВЭД
Функция ЗаполнитьСведениямиПТОНаСервере(МВТ)
	//at-sql"";Ref=""mercury_ATL
	Пароль = """";
	Пользователь = ""Администратор ООО АЯН+ ООО АТЛ"";
	
	// Создается объект-коннектор
	СOM1с = Новый COMObject(""V83.COMConnector"");
	// создается объект COM-соединение
	Попытка
		ВнешняяБазаУТ_Меркурий = СOM1с.Connect(""Srvr = """"at-sql"""";Ref=""""mercury_ATL""""; Usr = """"Егоров Д.Ю. АЯН + АТЛ""""; Pwd = "");
	Исключение
		Сообщить("" не удалось подключиться к базе УТ.Меркурий"");
		Возврат Неопределено;
	КонецПопытки; 
	
	Запрос   =  ВнешняяБазаУТ_Меркурий.NewObject(""Запрос"");
    Запрос.Текст = ""ВЫБРАТЬ
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование
		|ПОМЕСТИТЬ ВТ_ДанныеУТАПЗапросВМеркурий
		|ИЗ
		|	&ВТ_ДанныеУТАПЗапросВМеркурий КАК ВТ_ДанныеУТАПЗапросВМеркурий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СсылкаМеркурий
		|ИЗ
		|	ВТ_ДанныеУТАПЗапросВМеркурий КАК ВТ_ДанныеУТАПЗапросВМеркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод = Номенклатура.Код
		|			И ( ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод = Номенклатура.Родитель.Код
		|			ИЛИ ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование = Номенклатура.Родитель.Наименование)
		|ГДЕ
		|	НЕ Номенклатура.Ссылка ЕСТЬ NULL
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СсылкаМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_СсылкаМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_СсылкаМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция.Родитель.КодТНВЭД, """""""") КАК МеркурийКодТНВЭД
		|ИЗ
		|	ВТ_СсылкаМеркурий КАК ВТ_СсылкаМеркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
		|		ПО ВТ_СсылкаМеркурий.Ссылка = СоответствиеНоменклатурыВЕТИС.Номенклатура"";
	
	ВТ_ДанныеУТАПЗапросВМеркурий = ВнешняяБазаУТ_Меркурий.NewObject(""ТаблицаЗначений"");
	
    КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 11);
    ДопустимыеТипыКод = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
    ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураКод"", ДопустимыеТипыКод);
	
	КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 11);
	ДопустимыеТипыНаименование = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
	ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураРодительКод"", ДопустимыеТипыНаименование);
	
    КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 100);
    ДопустимыеТипыНаименование = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
    ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураРодительНаименование"", ДопустимыеТипыНаименование);
	
	
	Выборка = МВТ.Таблицы.Найти(""ВТ_ЗапросВМеркурий"").ПолучитьДанные().Выбрать();
  	Пока Выборка.Следующий() Цикл
        НовСтр = ВТ_ДанныеУТАПЗапросВМеркурий.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр(""ВТ_ДанныеУТАПЗапросВМеркурий"", ВТ_ДанныеУТАПЗапросВМеркурий);
	Данные_УтМеркурий = Запрос.Выполнить().Выгрузить();
	
	ТЗ_ДанныеМеркурий = Новый ТаблицаЗначений;
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураКод"", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураРодительКод"", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураРодительНаименование"", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""МеркурийКодТНВЭД"", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для каждого Сом_Стр_Меркурий Из Данные_УтМеркурий Цикл
		
		НовСтр = ТЗ_ДанныеМеркурий.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Сом_Стр_Меркурий); 
	
	КонецЦикла;
	
	//Разрыв соединения
	ВнешняяБазаУТ_Меркурий = Неопределено;
	
	//чз МВТ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураКод КАК СТРОКА(11)) КАК НоменклатураКод,
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураРодительКод КАК СТРОКА(11)) КАК НоменклатураРодительКод,
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураРодительНаименование КАК СТРОКА(100)) КАК НоменклатураРодительНаименование,
		|	Данные_УтМеркурий.МеркурийКодТНВЭД КАК МеркурийКодТНВЭД
		|ПОМЕСТИТЬ ВТ_МеркурийКодТНВЭД
		|ИЗ
		|	&Данные_УтМеркурий КАК Данные_УтМеркурий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеУтап.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеУтап.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ВТ_ДанныеУтап.Производитель КАК Производитель,
		|	ВТ_ДанныеУтап.Характеристика КАК Характеристика,
		|	ВТ_ДанныеУтап.Упаковка КАК Упаковка,
		|	ВТ_ДанныеУтап.ШтрихКод КАК ШтрихКод,
		|	ВТ_ДанныеУтап.Вес КАК Вес,
		|	ВТ_ДанныеУтап.ВесБрутто КАК ВесБрутто,
		|	ЕСТЬNULL(ВТ_МеркурийКодТНВЭД.МеркурийКодТНВЭД, """""""") КАК МеркурийКодТНВЭД,
		|	ВТ_ДанныеУтап.Цена КАК Цена,
		|	ВТ_ДанныеУтап.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_ДанныеУтап.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
		|	ВТ_ДанныеУтап.Номенклатура.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаСрокаГодности,
		|	ВТ_ДанныеУтап.Номенклатура.СрокГодности КАК СрокГодности 
		|ИЗ
		|	ВТ_ДанныеУтап КАК ВТ_ДанныеУтап
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МеркурийКодТНВЭД КАК ВТ_МеркурийКодТНВЭД
		|		ПО ВТ_ДанныеУтап.НоменклатураКод = ВТ_МеркурийКодТНВЭД.НоменклатураКод
		|			И ( ВТ_ДанныеУтап.НоменклатураРодительКод = ВТ_МеркурийКодТНВЭД.НоменклатураРодительКод
		|			ИЛИ ВТ_ДанныеУтап.НоменклатураРодительНаименование = ВТ_МеркурийКодТНВЭД.НоменклатураРодительНаименование)"";
	
	Запрос.УстановитьПараметр(""Данные_УтМеркурий"", ТЗ_ДанныеМеркурий);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

#КонецЕсли
"}
},
{0,
{"ПереопределяемыеНастройкиСКД",0,0,"","
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();

	
	//ayan#bitrix1847# Отчет. Объем заказа поставщику Кириллов П.С.  2022.12.02
	ПараметрыРегистрации.Версия = ""2022-12-02"";
	НаименованиеОтчета = ЭтотОбъект.Метаданные().Синоним;
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Наименование = НаименованиеОтчета; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Истина;
	//ПараметрыРегистрации.Информация = ""кпс_""; 
	
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОтчета;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ""ОткрытиеФормы"";
	//СтрТаблицы.ПоказыватьОповещение = Истина;

	  //ПараметрыРегистрации.РассылкаОтчетов = Истина; 
	
 	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	//Настройки.События.Вставить(""ПриСозданииНаСервере"", Истина);
	//Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Настройки = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Для каждого Эл Из Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(Эл) <> Тип(""ЭлементОтбораКомпоновкиДанных"") Тогда
			Продолжить;
		КонецЕсли;
	
		Если Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ОсновнойМенеджер"") Тогда
			ОсновнойМенеджер = Пользователи.ТекущийПользователь();
			Эл.Использование = Истина;
			Эл.ПравоеЗначение = ОсновнойМенеджер; 
		ИначеЕсли Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ДеньЗаказа"") Тогда
			Эл.Использование = Истина;
			Эл.ПравоеЗначение = НачалоНедели(ТекущаяДатаСеанса());
		КонецЕсли; 	
	
	КонецЦикла; 
	
	Форма.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	НовыеНастройкиКД = Настройки;
	
КонецПроцедуры


Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
		
КонецПроцедуры
 

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		
КонецПроцедуры


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецЕсли
"}
}
},
{6,
{"Обмен",1,0,"",""},
{0,
{"КД 3.0 EnterpriseData",1,0,"",""}
},
{2,
{"JSON",1,0,"",""},
{0,
{"ЧтениеJSON",0,0,"","ЧтениеJSON = Новый ЧтениеJSON;
ЧтениеJSON.ОткрытьФайл(ПутьКФайлу, КодировкаТекста.UTF8);
СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
ЧтениеJSON.Закрыть();
"}
},
{0,
{"ЗаписьJSON Тест",0,0,"","	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ЭтоТестовыйОбмен Тогда
		ДатаОтправки = Формат(ТекущаяДата(), ""ДФ=dd.MM.yyyy"");
		ДатаОтправки = СтрЗаменить(ДатаОтправки, ""."", """");
		
		ПутьКПапке = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТ Меркурий\ayan#2021_034#УТ Меркурий Не передаются новые Нмоенклатуры  Кириллов П.С.  2021.05.11"";
		ПолныйПуть = ПутьКПапке + ""\"" + ДатаОтправки + "".json"";
		ЗаписьJSON.ОткрытьФайл(ПолныйПуть,,,Новый ПараметрыЗаписиJSON(,Символы.Таб));
		
		//тест
		Сервер = СерверТест;
		Порт = ПортТест;
		//Соединение = Новый HTTPСоединение(""localhost"", ""80"",""exchange"",""222599"");	
	Иначе
		
		ЗаписьJSON.УстановитьСтроку();
		//рабоч
		Сервер = СерверРабочий;
		Порт = ПортРабочий;
		//Соединение = Новый HTTPСоединение(""at-sql4"",88,""exchange"",""222599"");
	КонецЕсли; 
	
	
	ЗаписатьJSON(ЗаписьJSON, МассивДокументов);
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();

	
	
//Вариант 2 

ВДЗ = мРезультатЗапроса.Выбрать();
МассивДанных = Новый Массив;

Пока ВДЗ.Следующий() Цикл
	СтруктураСтроки = Новый Структура(""СерияСсылка, ДатаПроизводства"");	
	СтруктураСтроки.СерияСсылка = XMLСтрока(ВДЗ.СерияСсылка);
	СтруктураСтроки.ДатаПроизводства = ВДЗ.СправкаАДатаРозлива;
	
	МассивДанных.Добавить(СтруктураСтроки);
	
КонецЦикла;

ЗаписьJSON = Новый ЗаписьJSON;
ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
ЗаписьJSON.ОткрытьФайл(""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТ ПЕРЕХОД\ОБМЕН\Обмен УТАП - УТ КД21\Данные\ДанныеОДатеПоизводства.JSON"");
ЗаписатьJSON(ЗаписьJSON, МассивДанных);
ЗаписьJSON.Закрыть();
"}
}
},
{1,
{"ПрямоеСоединение",1,0,"",""},
{0,
{"СоединениеСУТ_Меркурием",0,0,"","Функция ЗаполнитьСведениямиПТОНаСервере(МВТ)
	//at-sql"";Ref=""mercury_ATL
	//ПутьКБазе = """"192.168.90.14"""";Ref=""""buh_test"""";
	Пароль = """";
	Пользователь = ""Администратор ООО АЯН+ ООО АТЛ"";
	
	// Создается объект-коннектор
	СOM1с = Новый COMObject(""V83.COMConnector"");
	// создается объект COM-соединение
	Попытка
		ВнешняяБазаУТ_Меркурий = СOM1с.Connect(""Srvr = """"at-sql"""";Ref=""""mercury_ATL""""; Usr = """"Егоров Д.Ю. АЯН + АТЛ""""; Pwd = "");
	Исключение
		Сообщить("" не удалось подключиться к базе УТ.Меркурий"");
		Возврат Неопределено;
	КонецПопытки; 
	
	Запрос   =  ВнешняяБазаУТ_Меркурий.NewObject(""Запрос"");
    Запрос.Текст = ""ВЫБРАТЬ
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование
		|ПОМЕСТИТЬ ВТ_ДанныеУТАПЗапросВМеркурий
		|ИЗ
		|	&ВТ_ДанныеУТАПЗапросВМеркурий КАК ВТ_ДанныеУТАПЗапросВМеркурий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СсылкаМеркурий
		|ИЗ
		|	ВТ_ДанныеУТАПЗапросВМеркурий КАК ВТ_ДанныеУТАПЗапросВМеркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураКод = Номенклатура.Код
		|			И ( ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительКод = Номенклатура.Родитель.Код
		|			ИЛИ ВТ_ДанныеУТАПЗапросВМеркурий.НоменклатураРодительНаименование = Номенклатура.Родитель.Наименование)
		|ГДЕ
		|	НЕ Номенклатура.Ссылка ЕСТЬ NULL
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СсылкаМеркурий.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_СсылкаМеркурий.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_СсылкаМеркурий.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция.Родитель.КодТНВЭД, """""""") КАК МеркурийКодТНВЭД
		|ИЗ
		|	ВТ_СсылкаМеркурий КАК ВТ_СсылкаМеркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
		|		ПО ВТ_СсылкаМеркурий.Ссылка = СоответствиеНоменклатурыВЕТИС.Номенклатура"";
	
	ВТ_ДанныеУТАПЗапросВМеркурий = ВнешняяБазаУТ_Меркурий.NewObject(""ТаблицаЗначений"");
	
    КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 11);
    ДопустимыеТипыКод = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
    ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураКод"", ДопустимыеТипыКод);
	
	КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 11);
	ДопустимыеТипыНаименование = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
	ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураРодительКод"", ДопустимыеТипыНаименование);
	
    КвалифСтроки = ВнешняяБазаУТ_Меркурий.NewObject(""КвалификаторыСтроки"", 100);
    ДопустимыеТипыНаименование = ВнешняяБазаУТ_Меркурий.NewObject(""ОписаниеТипов"", ""Строка"", КвалифСтроки);    
    ВТ_ДанныеУТАПЗапросВМеркурий.Колонки.Добавить(""НоменклатураРодительНаименование"", ДопустимыеТипыНаименование);
	
	
	Выборка = МВТ.Таблицы.Найти(""ВТ_ЗапросВМеркурий"").ПолучитьДанные().Выбрать();
  	Пока Выборка.Следующий() Цикл
        НовСтр = ВТ_ДанныеУТАПЗапросВМеркурий.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр(""ВТ_ДанныеУТАПЗапросВМеркурий"", ВТ_ДанныеУТАПЗапросВМеркурий);
	Данные_УтМеркурий = Запрос.Выполнить().Выгрузить();
	
	ТЗ_ДанныеМеркурий = Новый ТаблицаЗначений;
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураКод"", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураРодительКод"", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""НоменклатураРодительНаименование"", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТЗ_ДанныеМеркурий.Колонки.Добавить(""МеркурийКодТНВЭД"", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для каждого Сом_Стр_Меркурий Из Данные_УтМеркурий Цикл
		
		НовСтр = ТЗ_ДанныеМеркурий.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Сом_Стр_Меркурий); 
	
	КонецЦикла;
	
	//Разрыв соединения
	ВнешняяБазаУТ_Меркурий = Неопределено;
	
	//чз МВТ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураКод КАК СТРОКА(11)) КАК НоменклатураКод,
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураРодительКод КАК СТРОКА(11)) КАК НоменклатураРодительКод,
		|	ВЫРАЗИТЬ(Данные_УтМеркурий.НоменклатураРодительНаименование КАК СТРОКА(100)) КАК НоменклатураРодительНаименование,
		|	Данные_УтМеркурий.МеркурийКодТНВЭД КАК МеркурийКодТНВЭД
		|ПОМЕСТИТЬ ВТ_МеркурийКодТНВЭД
		|ИЗ
		|	&Данные_УтМеркурий КАК Данные_УтМеркурий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеУтап.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеУтап.НоменклатураКод КАК НоменклатураКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительКод КАК НоменклатураРодительКод,
		|	ВТ_ДанныеУтап.НоменклатураРодительНаименование КАК НоменклатураРодительНаименование,
		|	ВТ_ДанныеУтап.Производитель КАК Производитель,
		|	ВТ_ДанныеУтап.Характеристика КАК Характеристика,
		|	ВТ_ДанныеУтап.Упаковка КАК Упаковка,
		|	ВТ_ДанныеУтап.ШтрихКод КАК ШтрихКод,
		|	ВТ_ДанныеУтап.Вес КАК Вес,
		|	ВТ_ДанныеУтап.ВесБрутто КАК ВесБрутто,
		|	ЕСТЬNULL(ВТ_МеркурийКодТНВЭД.МеркурийКодТНВЭД, """""""") КАК МеркурийКодТНВЭД,
		|	ВТ_ДанныеУтап.Цена КАК Цена
		|ИЗ
		|	ВТ_ДанныеУтап КАК ВТ_ДанныеУтап
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МеркурийКодТНВЭД КАК ВТ_МеркурийКодТНВЭД
		|		ПО ВТ_ДанныеУтап.НоменклатураКод = ВТ_МеркурийКодТНВЭД.НоменклатураКод
		|			И ( ВТ_ДанныеУтап.НоменклатураРодительКод = ВТ_МеркурийКодТНВЭД.НоменклатураРодительКод
		|			ИЛИ ВТ_ДанныеУтап.НоменклатураРодительНаименование = ВТ_МеркурийКодТНВЭД.НоменклатураРодительНаименование)"";
	
	Запрос.УстановитьПараметр(""Данные_УтМеркурий"", ТЗ_ДанныеМеркурий);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции"}
}
},
{1,
{"HTTP",1,0,"",""},
{0,
{"HTTP модуль",0,0,"","#Область  HTTP_Сервис

// Формирует HTTP ответ со стандартной структурой
//
// Параметры:
//  error  - Строка - Описание ошибки
//                 
//  data   - Структура - Данные
//                  
//  code    - Число - Код ответа 
//		200 - Все хорошо
//		201 - Исключение
//		202 - Ошибки по коду
//
// Возвращаемое значение:
//   HTTPСервисОтвет   - Заполненый по стандартной структуре
//
Функция ЗаполненныйОтветHTTP(error, data, code)  Экспорт
	
	ДанныеДляОтвета = СтруктураОтветаHTTP();
	ДанныеДляОтвета.error = error;
	ДанныеДляОтвета.data  = data;
	ДанныеДляОтвета.code   = code;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки[""Content-Type""] = ""text/json; charset=utf-8"";
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтвета);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция СтруктураОтветаHTTP()   Экспорт
	
	СтруктураОтветаHTTP = Новый Структура(""error, data, code"");
	
	Возврат СтруктураОтветаHTTP;
	
КонецФункции

Функция СтруктураИзТелаHTTPЗапроса(Запрос)   Экспорт
	
	СтруктураВхПараметров = Новый Структура;
	ЗапросОтКлиента = Запрос.ПолучитьТелоКакПоток();
	СтруктураВхПараметров.Вставить(""ТелоЗапроса"", ЗапросОтКлиента);
	Ридер = Новый ЧтениеJSON;
	Ридер.ОткрытьПоток(ЗапросОтКлиента);
	Результат = ПрочитатьJSON(Ридер);
	Ридер.Закрыть();
	
	Возврат Результат;
	
КонецФункции


Функция ТелоЗапросаJSON(Данные)   Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Возврат ТелоЗапроса
	
КонецФункции

#Область  НастройкиHTTPПодключения

// Возвращает данные настройки подключения к HTTP сервису (exchange) БД.УТАП 
//
// Параметры:
//  Рабочий   - Булево - По умолчанию ложь = Тестовый
//						Вариант подключения к HTTP Сервису (Тестовой или Рабочий)
//
//  ШаблонHTTPСервиса   - Строка - полное наименование шаблона HTTPСервиса с ""/""
//                 <Пример: exchange/partnerEDO>
//
//  ТелоЗапроса  - ЗаписьJSON -  с данными к отправке
//
// Возвращаемое значение:
//  Структура - СтруктураОтвета, Неопределено - данные с ответа с HTTP запроса
//
Функция ОтправитьДанныхHTTPПодключенияВУТ(Рабочий = Ложь, ШаблонHTTPСервиса, ТелоЗапроса) Экспорт
	
	Если Рабочий Тогда
		НастройкиПодключения = ayan_НастройкиHTTPПодключенияУТ_МеркурийРабочее(ШаблонHTTPСервиса);
	Иначе	
		НастройкиПодключения = ayan_НастройкиHTTPПодключенияУТ_Тест(ШаблонHTTPСервиса);
	КонецЕсли; 
	
	//ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(
		НастройкиПодключения.Сервер,
		Число(НастройкиПодключения.Порт),
		НастройкиПодключения.Пользователь,
		НастройкиПодключения.Пароль);//,,,ssl);	
			
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить(""Content-Type"", ""application/json; charset=utf-8"");
	ЗапросHTTP = Новый HTTPЗапрос(НастройкиПодключения.ИмяБазыУТ + НастройкиПодключения.ПутьКСервисуHTTP, ЗаголовокЗапросаHTTP);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если ОтветHTTP.КодСостояния = 200 Тогда

		ТелоОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат СтруктураОтвета;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции	

// Возвращает данные настройки подключения к HTTP сервису (exchange) БД.УТАП 
//
// Параметры:
//  Рабочий   - Булево - По умолчанию ложь = Тестовый
//						Вариант подключения к HTTP Сервису (Тестовой или Рабочий)
//
//  ШаблонHTTPСервиса   - Строка - полное наименование шаблона HTTPСервиса с ""/""
//                 <Пример: exchange/partnerEDO>
//
//  ТелоЗапроса  - ЗаписьJSON -  с данными к отправке
//
// Возвращаемое значение:
//  Структура - СтруктураОтвета, Неопределено - данные с ответа с HTTP запроса
//
Функция ОтправитьДанныхHTTPПодключенияВУТ2021(Рабочий = Ложь, ШаблонHTTPСервиса, ТелоЗапроса) Экспорт
	
	Если Рабочий Тогда
		НастройкиПодключения = ayan_НастройкиHTTPПодключенияУТ_Рабочее(ШаблонHTTPСервиса);
	Иначе	
		НастройкиПодключения = ayan_НастройкиHTTPПодключенияУТ_Тест(ШаблонHTTPСервиса);
	КонецЕсли; 
	
	//ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(
		НастройкиПодключения.Сервер,
		Число(НастройкиПодключения.Порт),
		НастройкиПодключения.Пользователь,
		НастройкиПодключения.Пароль);//,,,ssl);	
		
	НастройкиПодключения.ПутьКСервисуHTTP = ""/hs/"" + ШаблонHTTPСервиса;
	НастройкиПодключения.ИмяБазыУТ = ""baseUT"";
	
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить(""Content-Type"", ""application/json; charset=utf-8"");
	ЗапросHTTP = Новый HTTPЗапрос(НастройкиПодключения.ИмяБазыУТ + НастройкиПодключения.ПутьКСервисуHTTP, ЗаголовокЗапросаHTTP);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если ОтветHTTP.КодСостояния = 200 Тогда

		ТелоОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат СтруктураОтвета;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

// Возвращает РАБОЧИЕ настройки подключения к HTTP сервису (exchange) БД.УТ 
//
// Параметры:
//  ШаблонHTTPСервиса   - Строка - полное наименование шаблона HTTPСервиса с ""/""
//                 <Пример: /partnerEDO>
//
// Возвращаемое значение:
//  Структура - СтруктураНастроек для HTTP Подключения
//
Функция ayan_НастройкиHTTPПодключенияУТ_Рабочее(ШаблонHTTPСервиса) Экспорт
	
	СтруктураНастроек = СтруктураНастроек();
	
	СтруктураНастроек.Сервер = ""AT-SQL"";
	СтруктураНастроек.Порт = ""6464"";
	СтруктураНастроек.Пользователь = ""exchange"";
	СтруктураНастроек.Пароль = ""222599"";
	СтруктураНастроек.ИмяБазыУТ = ""mercury_atl"";
	СтруктураНастроек.ПутьКСервисуHTTP = ""/hs/exchange"" + ШаблонHTTPСервиса;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ayan_НастройкиHTTPПодключенияУТ_МеркурийРабочее(ШаблонHTTPСервиса) Экспорт
	
	СтруктураНастроек = СтруктураНастроек();
	
	СтруктураНастроек.Сервер = ""at-sql4"";
	СтруктураНастроек.Порт = ""88"";
	СтруктураНастроек.Пользователь = ""exchange"";
	СтруктураНастроек.Пароль = ""222599"";
	СтруктураНастроек.ИмяБазыУТ = ""mercury_atl"";
	СтруктураНастроек.ПутьКСервисуHTTP = ""/hs/exchange"" + ШаблонHTTPСервиса;
	
	Возврат СтруктураНастроек;
	
КонецФункции


// Возвращает ТЕСТОВЫЕ настройки подключения к HTTP сервису (exchange) БД.УТ 
//
// Параметры:
//  ШаблонHTTPСервиса   - Строка - полное наименование шаблона HTTPСервиса с ""/""
//                 <Пример: /partnerEDO>
//
// Возвращаемое значение:
//  Структура - СтруктураНастроек для HTTP Подключения
//
Функция ayan_НастройкиHTTPПодключенияУТ_Тест(ШаблонHTTPСервиса) Экспорт
	
	СтруктураНастроек = СтруктураНастроек();
	
	СтруктураНастроек.Сервер = ""at-sql5"";
	СтруктураНастроек.Порт = ""80"";
	СтруктураНастроек.Пользователь = ""exchange"";
	СтруктураНастроек.Пароль = ""222599"";
	СтруктураНастроек.ИмяБазыУТ = ""mercury_atl"";
	СтруктураНастроек.ПутьКСервисуHTTP = ""/hs/exchange"" + ШаблонHTTPСервиса;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СтруктураНастроек() 
	СтруктураНастроек = Новый Структура(""Сервер ,Порт, Пользователь, Пароль, ИмяБазыУТ, ПутьКСервисуHTTP"");
	Возврат СтруктураНастроек;
КонецФункции 

#КонецОбласти

#КонецОбласти
"}
}
},
{1,
{"Файлы",1,0,"",""},
{0,
{"Закгрузка MXL",0,0,"","	ТабДок = Новый ТабличныйДокумент; 
	ТабДок.Прочитать(""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_050#УТАП Разработка мх Ведения План-факт анализа с учетом бонусов экспедиторам Кириллов П.С.  2021.08.08\Пользователи Без учета плана прода.mxl"");
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	ТЗ = ПЗ.Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Объект,
		|	&Свойство КАК Свойство,
		|	ИСТИНА КАК Значение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование В(&Наименование)"";
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(""Не учитывать агента в планах продаж"");
	
	Запрос.УстановитьПараметр(""Наименование"", ТЗ.ВыгрузитьКолонку(""Агент""));
	Запрос.УстановитьПараметр(""Свойство"", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись ,ВДЗ); 
	    Запись.Записать();
	КонецЦикла;
	
"}
}
},
{1,
{"XML",1,0,"",""},
{0,
{"ПолучитьОбъектXML",0,0,"","	СтруктураОбъекта = Новый Структура();
	ТипXML = XMLТипЗнч(ИсходныйОбъект);
	СтруктураОбъекта.Вставить(""ИмяТипа"", ТипXML.ИмяТипа);
	СтруктураОбъекта.Вставить(""Ссылка"", XMLСтрока(ИсходныйОбъект.Ссылка));
	
Функция ПолучитьОбъектXML(СтруктураПараметров)
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат  Неопределено;
	КонецЕсли;
		
	ОбъектСсылка = Неопределено;
	
	ИмяТипа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, ""ИмяТипа"", Неопределено); 	
	
	Если ИмяТипа <> Неопределено Тогда
		
		Тип = ИзXMLТипа(ИмяТипа, """");
		ОбъектСсылка = XMLЗначение(Тип, СтруктураПараметров.Ссылка);
		
	КонецЕсли; 
	
	Если ОбъектСсылка = Неопределено ИЛИ СтрНайти(Строка(ОбъектСсылка),""Объект не найден"") > 0 Тогда
		//Запрос по полям поиска
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
			МенеджерОбъекта = Справочники[ОбъектСсылка.Метаданные().Имя];
			
			ПоляПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, ""ПоляПоиска"", Неопределено);
			Если ПоляПоиска <> Неопределено Тогда
				
				//Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
				
				МассивСтрокПоиска = СтрРазделить(ПоляПоиска,"","", Ложь);
				
				Для каждого Ключ Из МассивСтрокПоиска Цикл
					
					ПолеПоиска = СокрЛП(Ключ);
					
					ОбъектСсылка = МенеджерОбъекта.НайтиПоРеквизиту(ПолеПоиска, СтруктураПараметров[Ключ]);
					
					Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
						Возврат ОбъектСсылка;
					КонецЕсли;
					
				КонецЦикла;
				
				//КонецЕсли; 
				
				//Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
				//	Возврат Неопределено;
				//КонецЕсли;
				//	
				//Иначе //
				
			КонецЕсли; 
			
			Возврат Неопределено;
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
			МенеджерОбъекта = Документы[ОбъектСсылка.Метаданные().Имя];
			
			ОбъектДокумент = ПолучитьДокументПоДатеНомеру(СтруктураПараметров);
			Возврат ОбъектСсылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат  ОбъектСсылка;
	
КонецФункции // ()
"}
}
}
},
{0,
{"ПередачаПараметра",0,0,"пар[аметр]","&НаКлиенте
Процедура ПередатьПараметрПроекта(ПарКлиент)
	Если ЗначениеЗаполнено(ПарКлиент) Тогда
		СписокПроектов.Параметры.УстановитьЗначениеПараметра(""Ссылка"",ПарКлиент);	
	КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"ДобавитьКолонку",0,0,"кол[онку]","Колонки.Добавить(""<?""Имя колонки"">"");"}
},
{0,
{"ПроцедОповещ",0,0,"проо","&НаКлиенте
Процедура <?""Имя Процедуры"">(ПараметрыВыбора,Параметры) Экспорт
	<?>
КонецПроцедуры"}
},
{0,
{"БыстраяДата",0,0,"дд","ДатаДляИзменения = Дата(Год(ТДата),Месяц(ТДата),День(ТДата),Час(ТВрем),Минута(ТВрем),Секунда(ТВрем));"}
},
{14,
{"УФ",1,0,"",""},
{2,
{"Программно",1,0,"",""},
{0,
{"ДобавитьЭлФормы",0,1,"элф","ГруппаФормы = Элементы.Найти(""<?""Имя группы формы"">"");
Если Элементы.Найти(""<?""Имя формы"">"") = Неопределено Тогда
	ЭлемФормы = Элементы.Добавить(""<?""Имя формы"">"", Тип(""ПолеФормы""),ГруппаФормы);
	ЭлемФормы.Вид = ВидПоляФормы.ПолеВвода;
	ЭлемФормы.ПутьКДанным = ""Объект.""<?>"""";
	ЭлементФормы.УстановитьДействие(""ПриИзменении"",""ПриИзменении<?""Имя формы"">"");
КонецЕсли; 
"}
},
{0,
{"ДобавлениеРеквизитаНаФорму",0,0,"","
ayan_РеквизитТЧСерии_ДатаРозлива = Новый РеквизитФормы(""ayan_ДатаРозлива"", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), ""Объект.Серии"", ""Дата розлива"");
ayan_МассивРеквизитов = Новый Массив;
ayan_МассивРеквизитов.Добавить(ayan_РеквизитТЧСерии_ДатаРозлива);
ИзменитьРеквизиты(ayan_МассивРеквизитов);

ayan_ЭлементДатаРозлива = Элементы.Вставить(""ayan_ДатаРозлива"", Тип(""ПолеФормы""), ЭтаФорма.Элементы.Серии, ЭтаФорма.Элементы.СерииКоличествоУпаковок);
ayan_ЭлементДатаРозлива.Вид = ВидПоляФормы.ПолеВвода;
ayan_ЭлементДатаРозлива.ПутьКДанным = ""Объект.Серии.ayan_ДатаРозлива"";
ayan_ЭлементДатаРозлива.Заголовок = ""Дата розлива"";
"}
}
},
{0,
{"ОткрытиеФормы",0,0,"оф","ПарамФормы = Новый Структура("""",);
ОповещФормы = новый ОписаниеОповещения("""",ЭтаФорма);
ОткрытьФорму("""",ПарамФормы,ЭтаФорма,,,,ОповещФормы);"}
},
{0,
{"ТекущиеДанныеТЧ формы",0,0,"тел","ТекЭлемент = Элементы.<?""Имя ТЧ"">.ТекущиеДанные;

Если ТекЭлемент = Неопределено Тогда
	Возврат;
КонецЕсли;
"}
},
{0,
{"ФокусНаФорме",0,0,"фф","ЭтаФорма.ТекущийЭлемент = Элементы.ИмяЭлеметаФормы;"}
},
{0,
{"ФокусНаТЧ",0,0,"фт","ЭтаФорма.ТекущийЭлемент = Элементы.ИмяТЧ; 

//Вар 2  По поиску
ТекЭлемент = Элементы.Деятельность.ТекущиеДанные;

Если ТекЭлемент = Неопределено Тогда
	Возврат;
КонецЕсли;  

Ттекущ = ТекЭлемент.Тнач;
ПересчитатьССортировкой();	

МПоиска = ЭтаФорма.Объект.Деятельность.НайтиСтроки(Новый Структура(""Тнач"", Ттекущ));  
Если МПоиска.Количество() > 0 Тогда
	ТекСтр = МПоиска[МПоиска.ВГраница()];	  
	
	Элементы.Деятельность.ТекущаяСтрока = ТекСтр.ПолучитьИдентификатор(); // // Нужная строка
	Элементы.Деятельность.ТекущийЭлемент = Элементы.ДеятельностьВидДействия; // Нужная колонка
	
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = """";
	//Сообщение.Поле = СтрШаблон(""Объект.Деятельность[%1].ВидДействия"", Строка(Объект.Деятельность.Индекс(ТекСтр)));
	//Сообщение.УстановитьДанные(Объект);
	//Сообщение.Сообщить();                   
	
КонецЕсли;   
"}
},
{0,
{"ИндексИдентификаторСтроки",0,0,"","&НаКлиенте
Процедура ДанныеОВремениПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
    
    ТекСтрока = Элементы.ДанныеОВремени.ТекущаяСтрока;
    НСтроки   =  Объект.ДанныеОВремени.НайтиПоИдентификатору(ТекСтрока).НомерСтроки;
    УчетРабочегоВремениРасширенныйКлиент.ТабельДанныеОВремениПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
    
    СортироватьПоВозрастаниюНаСервере();
    
    НовыйИд = Объект.ДанныеОВремени[НСтроки - 1].ПолучитьИдентификатор();
    Элементы.ДанныеОВремени.ТекущаяСтрока = НовыйИд;
    
КонецПроцедуры
"}
},
{0,
{"Рекфизит Формы В Значение",0,0,"рфз","ЭтаОбработка = РеквизитФормыВЗначение(""Объект"");"}
},
{2,
{"РаботаСФайлами",1,0,"",""},
{0,
{"ВыборКаталога",0,0,"","&НаКлиенте
Процедура ПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = """"; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = ""Выберите каталог""; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог; 
	КонецЕсли; 
	
КонецПроцедуры


		
	Каталог = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора(Ложь);
	Если ЗначениеЗаполнено(Каталог)  Тогда
		ПутьККаталогу = Каталог; 
	КонецЕсли; 
	
	
"}
},
{0,
{"ВыборФайла",0,0,"","&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = """"; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = ""Выберите Файл""; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьКФайлу = ДиалогОткрытия.ПолноеИмяФайла; 
	КонецЕсли; 
	
КонецПроцедуры

	
	ПолноеИмяФайла = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора();
	Если ЗначениеЗаполнено(ПолноеИмяФайла)  Тогда
		ПутьКФайлу = ПолноеИмяФайла; 
	КонецЕсли; 
	
"}
}
},
{0,
{"ПоказатьВопрос",0,0,"","	Оповещение = Новый ОписаниеОповещения(""ИмяПроцедурыЗавершения"", ЭтаФорма, ДополнительныеПараметры);
	ТекстВопроса = ""Текст вопроса ?"";

	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПроцедурыЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	...
КонецПроцедуры"}
},
{0,
{"ОписаниеОповещения",0,0,"ОО","ОписОповещФормы = Новый ОписаниеОповещения( ""<? ""Имя Процедуры"" >"", ЭтаФорма); //ЭтаФорма, ЭтотОбъект

&НаКлиенте
//Какие параметры могут передаваться:
//ПараметрыЗакрытия, СтандартныеРеквизиты, ФормаРедактированияСтроки, СтруктураПараметров, ВыполняемоеОповещение, Результат, ИсточникВыбора 
Процедура <?""Имя Процедуры"">(ПараметрыВыбора, Параметры) Экспорт 
	<?>
КонецПроцедуры"}
},
{1,
{"ДинСпис",1,0,"",""},
{0,
{"ПрогрОтбор",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьОтбор(Параметры.ЭтоОфис);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(ЭтоОфис = """")
	
	ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	КатегорияОфис = Справочники.ФлюгерКатегории.ПолучитьСсылку(Новый УникальныйИдентификатор(""8c7d72d0-b4f7-11e7-819a-00155d640d00""));
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ПартнерФлюгерКатегория"");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = КатегорияОфис;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""КлиентНомерТелефона"");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Значение2;   
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элементы.Список.Обновить();
	
КонецПроцедуры
"}
}
},
{2,
{"ТабличнаяЧасть",1,0,"",""},
{0,
{"ОтборСтрок",0,0,"","Процедура ЗонаНабораПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗонаНабора)  Тогда
		СтруктураОтбора = Новый Структура(""ЗонаНабора"", ЗонаНабора);
		Элементы.Данные.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗонаНабораОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Данные.ОтборСтрок = Неопределено;
КонецПроцедуры
"}
},
{0,
{"ВыделенныеСтроки",0,0,"","	МассивСвязанныхФайлов = Новый Массив;
	ТабличнаяЧасть = Элементы.СвязанныеФайлы;
	ВыделенныеСтроки = ТабличнаяЧасть.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекДанные = ТабличнаяЧасть.ДанныеСтроки(ИдентификаторСтроки);
		
		ТекДанные.neti_ТипСвязанногоФайла = ПараметрыВыбора;
		МассивСвязанныхФайлов.Добавить(ТекДанные.СвязанныйФайл);
	КонецЦикла;"}
}
},
{0,
{"СвойСписокВыбора",0,0,"","         
&НаКлиенте
Процедура ИдентификаторУстройстваККТНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	//СписокИДУстройств = Новый СписокЗначений;	
	СписокИДУстройств = ПриИзмененииОрганизацииККТ(Истина, Истина);
	//ВыбранныйЭлемент = ВыбратьИзСписка(СписокИДУстройств, Элемент);
	Оп = Новый ОписаниеОповещения(""ВыполнитьПослеВыбора"", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оп, СписокИДУстройств, Элемент);
    СтандартнаяОбработка = Ложь;
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыполнитьПослеВыбора(ПараметрыВыбора, Результат) Экспорт 
	Если ПараметрыВыбора <> Неопределено Тогда
		ИдентификаторУстройстваККТ = ПараметрыВыбора.Значение;
	КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"ПроизвольныйОбъектПоСсылке",0,0,"","&НаКлиенте
Процедура Док_СсылкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	пр_Клиент.Объект1СОкончаниеВводаТекста(Док_Ссылка, Текст, СтандартнаяОбработка); 
КонецПроцедуры
"}
}
},
{0,
{"Сообщение",0,0,"Сооб","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Сообщить();"}
},
{0,
{"БлокОпер",0,0,"блок","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.ТоварыНаСкладах"");
ЭлементБлокировки.УстановитьЗначение("""", );
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
ЭлементБлокировки.ИсточникДанных = ДокументОбъект.ВозвратнаяТара;
ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
Блокировка.Заблокировать();"}
},
{0,
{"БлокБух",0,0,"блок","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрБухгалтерии.Управленческий"");
ЭлементБлокировки.УстановитьЗначение(""Счет"", );
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
ЭлементБлокировки.ИсточникДанных = РЗ;
ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
Блокировка.Заблокировать();	
"}
},
{2,
{"Работа с расширениями",1,0,"",""},
{0,
{"#Вставка",0,0,"вст","#Вставка
	<?>
#КонецВставки
"}
},
{0,
{"#Удаление",0,0,"уд","#Удаление
	<?>
#КонецУдаления"}
}
},
{5,
{"БСП",1,0,"",""},
{0,
{"ДлительныеОперации",0,0,"","ДлительныеОперации.ВыполнитьПроцедуру(,""РегистрыСведений.СП_ДокументыКОтправкеВУТАП.ОтправитьДокументы"", Настройки, МассивДокументов); // УТ Меркурий"}
},
{0,
{"СообщениеВТЧ",0,0,"","	Поле = ""Объект.Остатки["" + (МассивНеЗаполненнойНоменклатуры1С[0].НомерСтроки - 1) + ""].Номенклатура"";
	ТекстСообщения = НСтр(""ru = 'Программа не смогла однозначно сопоставить Номменклатуру ЕГАИС с 1С. Сопоставление следует сделать самостоятельно'"");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
"}
},
{0,
{"СтроковыеФункцииКлиентСервер",0,0,"","ТекстВозврат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='Ваш заказ № %1 принят в работу'""),НовыйДокумент.Номер);
"}
},
{0,
{"СвойствоСтруктуры",0,0,"свстр","ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства,""гс_АдресСДаннымиДляВычерков"", Неопределено);
"}
},
{0,
{"Сообщение чз БСП",0,0,"сообсп","ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""<?""Текст сообщения"">"");"}
}
},
{1,
{"ПереходУТ",1,0,"",""},
{0,
{"перех",0,0,"","//TODO: #УдалитьПослеПерехода"}
}
},
{3,
{"Администрирование",1,0,"",""},
{0,
{"Нет всплывающим окнам в интерф",0,0,"","
//ОМ.СтандартныеПодсистемыКлиентПовтИсп
//	&Вместо(""ПараметрыРаботыКлиентаПриЗапуске"")
	
// ▼ кпс# Убираю лишние всплывающие служебные окна Кириллов П.С. УТ 11.4.13.155 ▼ Начало
	ПараметрыКлиента = Новый Структура(ПараметрыКлиента);
	
	ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы = Ложь;
	
	//ИнтернетПоддержкаПользователей
	ИнтернетПоддержкаПользователей_Структура = Новый Структура(ПараметрыКлиента.ИнтернетПоддержкаПользователей);
	МониторПортала1СИТС_Структура = Новый Структура(ИнтернетПоддержкаПользователей_Структура.МониторПортала1СИТС);
	МониторПортала1СИТС_Структура.ПоказыватьПриНачалеРаботы = Ложь;
	ИнтернетПоддержкаПользователей_Структура.Вставить(""МониторПортала1СИТС"", Новый ФиксированнаяСтруктура(МониторПортала1СИТС_Структура));
	ПараметрыКлиента.Вставить(""ИнтернетПоддержкаПользователей"", Новый ФиксированнаяСтруктура(ИнтернетПоддержкаПользователей_Структура));
	
	//ИнформацияПриЗапуске
	ИнформацияПриЗапуске_Структура = Новый Структура(ПараметрыКлиента.ИнформацияПриЗапуске);
	ИнформацияПриЗапуске_Структура.Показывать = Ложь;
	ПараметрыКлиента.Вставить(""ИнформацияПриЗапуске"", Новый ФиксированнаяСтруктура(ИнформацияПриЗапуске_Структура));
	
	//НастройкиОбновления
	НастройкиОбновления_Структура = Новый Структура(ПараметрыКлиента.НастройкиОбновления);
	НастройкиОбновления_Структура.НастройкиОбновленияКонфигурации.ДатаВремяОбновления = '00010101';
	ПараметрыКлиента.Вставить(""НастройкиОбновления"", Новый ФиксированнаяСтруктура(НастройкиОбновления_Структура));
		
	//ЦентрМониторинга
	ЦентрМониторингаСтруктура = Новый Структура(ПараметрыКлиента.ЦентрМониторинга);
	ЦентрМониторингаСтруктура.ВыводитьЗапросПолныхДампов = Ложь;
	ЦентрМониторингаСтруктура.РегистрироватьБизнесСтатистику = Ложь;
	ПараметрыКлиента.Вставить(""ЦентрМониторинга"", Новый ФиксированнаяСтруктура(ЦентрМониторингаСтруктура));
	
	ПараметрыКлиента = Новый ФиксированнаяСтруктура(ПараметрыКлиента);
// ▲ кпс# Убираю лишние всплывающие служебные окна Кириллов П.С.  УТ 11.4.13.155 ▲ Конец 
"}
},
{0,
{"",1,0,"",""}
},
{0,
{"ИмяИБ",0,0,"","ИмяИБ = Сред(СтрокаСоединенияИнформационнойБазы() ,СтрНайти(СтрокаСоединенияИнформационнойБазы(),""Ref="")+4,СтрДлина(СтрокаСоединенияИнформационнойБазы()) - СтрНайти(СтрокаСоединенияИнформационнойБазы() ,""Ref="") - 4);"}
}
},
{3,
{"РаботаСВнешнимиФайлами",1,0,"",""},
{0,
{"ТекстовыйДокумент",0,0,"","
ТелоЗапроса = аян_ОбменДанными.ТелоЗапросаJSON(СтруктураЗапроса);

ТекстСтруктураЗапроса = Новый ТекстовыйДокумент;
ПутьКФайлуJSON = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТ ПЕРЕХОД\ОБМЕН\Обмен УТАП - УТ КД21\Данные\Документы\СтруктураЗапроса.json"";
ТекстСтруктураЗапроса.УстановитьТекст(ТелоЗапроса);
ТекстСтруктураЗапроса.Записать(ПутьКФайлуJSON, КодировкаТекста.UTF8);

ЭтоТест = Истина;
Если ЭтоТест Тогда  //ПОД: Зарузка Текстового документа из файла
	ТекстПОД = Новый ТекстовыйДокумент;
	ПутьКПОД = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТ ПЕРЕХОД\ОБМЕН\Обмен УТАП - УТ КД21\ПОД\ПОД 2021 09 13 Лайт.xml"";
	ТекстПОД.Прочитать(ПутьКПОД, КодировкаТекста.UTF8);
	//ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена = ТекстПОД.ПолучитьТекст();
	ТекстПОД.Записать(ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена);
	
Иначе	   //ПОД: Зарузка Текстового документа чз Макет
	ИмяОбработки = ""аян_ОбменКД21"";
	ОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОбработки);
	ОбъектОбработка = ДополнительныеОтчетыИОбработкиВызовСервера.ПолучитьОбъектВнешнейОбработки(ОбработкаСсылка);
	МакетПравилОбмена = ОбъектОбработка.ПолучитьМакет(""ПравилаПереносаДанных"");
	МакетПравилОбмена.Записать(ОбработкаВыгрузкиДанных.ИмяФайлаПравилОбмена);
КонецЕсли; "}
},
{0,
{"Универсальный",0,0,"","//Процедуры и функции сохранения значений

//Запись   JSON в текстовый файл
ЗначениеВФайл(ПутьКФайлуJSON, ТелоЗапроса);

//Чтение
ЗначениеИзФайла(ПутьКФайлуJSON)


//ЗначениеВСтрокуВнутр()
//ЗначениеИзСтрокиВнутр()"}
},
{0,
{"mxl в ТЗ",0,0,"","//Загрузка из .mxl
ТабДок = Новый ТабличныйДокумент;
ТабДок.Прочитать(""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\УТАП\ayan#2021_063#УТАП Корректировка количества в ТЧ.ТоварыСерии и Движения РН.ТоварыНаСкладах в Д.Реализация Кириллов П.С.  2021.09.24\ТоварыМеркурийВетис 2021 09 28.mxl"");

ПЗ = Новый ПостроительЗапроса;    
ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
ПЗ.ЗаполнитьНастройки();
ПЗ.Выполнить();

Данные_УтМеркурий = ПЗ.Результат.Выгрузить();
	
//Сохранение в .mxl
ТабДок = Новый ТабличныйДокумент;   
Построитель = Новый ПостроительОтчета();
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТестоваяТаблица);
Построитель.ВыводитьЗаголовокОтчета = Ложь;
Построитель.Вывести(ТабДок);
ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента);


Функция РаботаСФайлами()

	
	ДатаСверки = КонецМесяца(ДатаСверкиВх);
	ПутьДата = Строка(формат(Год(ДатаСверки), ""ЧГ=0"")) + Строка(Месяц(ДатаСверки)) + Строка(День(ДатаСверки));
	
	ПолныйПутьКФайлу = СтрШаблон(""\\192.168.90.19\Temp_files\кпс\ЕРП\!НеУдалятьСверкаРезервовОтпусков\Резерв%1.mxl"", ПутьДата);	
	
	ТЗ_Было = ПолучитьТЗ(ПолныйПутьКФайлу);
	
	СохранитьТЗ(ТЗ_Было, , ПутьДата, , ТипФайлаТабличногоДокумента.XLS); 
	
	ТЗ_Стало = ПолучитьТЗ( , ПутьДата, , ТипФайлаТабличногоДокумента.XLS); 
	
	Возврат Результат;
	
КонецФункции 

#Область  РаботаСФайлами

// Сохранение во внешний файл .mxl, xls
//
// Параметры:
//  ТЗ  - ТаблицаЗначений - Таблица которую нужно записать. 
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
//
Функция СохранитьТЗ(ТЗ, ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипХранения = Неопределено Тогда 
			ТипХранения = ТипФайлаТабличногоДокумента.MXL;	
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;   
		Построитель = Новый ПостроительОтчета();
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		ТабДок.Записать(ПолныйПутьКФайлу, ТипХранения)		;
		Возврат Истина;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//Загрузка из .mxl, xls
//
// Параметры:   
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
//
Функция ПолучитьТЗ(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ТабДок = Новый ТабличныйДокумент;
		
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДок.Прочитать(ПолныйПутьКФайлу);
		
		ПЗ = Новый ПостроительЗапроса;    
		ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
		ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
		ПЗ.ЗаполнитьНастройки();
		ПЗ.Выполнить();
		
		Возврат ПЗ.Результат.Выгрузить();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции   

//Удаляет файл  .mxl, xls
//
// Параметры:
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"", ""xls"" и тд по умолчанию - mxl 
Функция УдалитьТЗ(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
	Попытка
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""Не определен путь к файлу"";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		УдалитьФайлы(ПолныйПутьКФайлу);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//ТипХранения - ТипФайлаТабличногоДокумента - ""mxl"" , ""xls"" и тд  
//По умолчанию ""mxl""
Функция ПолныйПутьКФайлу(ПолныйПутьКФайлу = """", ИмяФайла = """", ПутьККаталогу = """", ТипХранения = Неопределено) Экспорт
	
		
	Если ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда
		Возврат  ПолныйПутьКФайлу;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда 
		ПутьККаталогу = ?(Прав(ПутьККаталогу, 1) = ""\"", ПутьККаталогу, ПутьККаталогу + ""\"");
		ПутьКФайлу = ПутьККаталогу + ИмяФайла;	
	Иначе // в каталог по умолчанию 
		//TODO:  Сделать регистр для хранения путей для разных пользователей  
		// тупенько 
		ИмяТекПользователя = Пользователи.ТекущийПользователь().Наименование;
		Если ИмяТекПользователя = ""КирилловПС"" Тогда
			Каталог = ""\\pivo.local\Resource\Личные\Кириллов ПС\Кпс_Разработка\Задачи\"";
		ИначеЕсли ИмяТекПользователя = """" Тогда
			//Каталог = ""\\кпс\"";
			//...
			
		Иначе
			Возврат  Неопределено;
		КонецЕсли;
		
		ПутьКФайлу = Каталог + ИмяФайла;	
	
	КонецЕсли; 
	
	//Для других вариантов, например в exel	
	Если ЗначениеЗаполнено(ТипХранения) Тогда
		ПутьКФайлу = ПутьКФайлу + ""."" + Строка(ТипХранения);		
	Иначе //По умолчанию 
		ПутьКФайлу = ПутьКФайлу + "".mxl"";		
	КонецЕсли;
	
	Возврат  ПутьКФайлу;
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу) Экспорт
	ТекФайл = Новый Файл(ПутьКФайлу);	
	Возврат ТекФайл;
КонецФункции

#КонецОбласти

"}
}
},
{0,
{"Кодирование строк в формат Base64 и обратно в 1С",0,0,"","//Использовать для JSON Web Token (JWT) 
//Пример: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE1ODEzNTcwMzl9.E4FNMef6tkjIsf7paNrWZnB88c3WyIfjONzAeEd4wF0
//{""alg"":""HS256"",""typ"":""JWT""}
//{""user_id"":1,""exp"":1581357039}
//

//Кодируем
ИсходныяСтрока = ""Что-то хочу закодировать"";

ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(ИсходныяСтрока);
СтрокаBase64 = Base64Строка(ДвоичныеДанныеСтроки);

//Декодируем
ДвоичныеДанныеСтроки = Base64Значение(СтрокаBase64);
ИсходныяСтрока = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеСтроки);"}
}
}
}